<?php
/**
 * CarrierAccountsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CarrierAccountsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CarrierAccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createCarrierAccount' => [
            'application/json',
        ],
        'getCarrierAccount' => [
            'application/json',
        ],
        'getCarrierRegistrationStatus' => [
            'application/json',
        ],
        'initiateOauth2Signin' => [
            'application/json',
        ],
        'listCarrierAccounts' => [
            'application/json',
        ],
        'registerCarrierAccount' => [
            'application/json',
        ],
        'updateCarrierAccount' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCarrierAccount
     *
     * Create a new carrier account
     *
     * @param  \OpenAPI\Client\Model\ConnectExistingOwnAccountRequest $connect_existing_own_account_request Examples. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>
     */
    public function createCarrierAccount($connect_existing_own_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['createCarrierAccount'][0])
    {
        list($response) = $this->createCarrierAccountWithHttpInfo($connect_existing_own_account_request, $shippo_api_version, $contentType);
        return $response;
    }

    /**
     * Operation createCarrierAccountWithHttpInfo
     *
     * Create a new carrier account
     *
     * @param  \OpenAPI\Client\Model\ConnectExistingOwnAccountRequest $connect_existing_own_account_request Examples. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCarrierAccountWithHttpInfo($connect_existing_own_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['createCarrierAccount'][0])
    {
        $request = $this->createCarrierAccountRequest($connect_existing_own_account_request, $shippo_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CarrierAccount',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createCarrierAccountAsync
     *
     * Create a new carrier account
     *
     * @param  \OpenAPI\Client\Model\ConnectExistingOwnAccountRequest $connect_existing_own_account_request Examples. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCarrierAccountAsync($connect_existing_own_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['createCarrierAccount'][0])
    {
        return $this->createCarrierAccountAsyncWithHttpInfo($connect_existing_own_account_request, $shippo_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCarrierAccountAsyncWithHttpInfo
     *
     * Create a new carrier account
     *
     * @param  \OpenAPI\Client\Model\ConnectExistingOwnAccountRequest $connect_existing_own_account_request Examples. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCarrierAccountAsyncWithHttpInfo($connect_existing_own_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['createCarrierAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CarrierAccount';
        $request = $this->createCarrierAccountRequest($connect_existing_own_account_request, $shippo_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCarrierAccount'
     *
     * @param  \OpenAPI\Client\Model\ConnectExistingOwnAccountRequest $connect_existing_own_account_request Examples. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCarrierAccountRequest($connect_existing_own_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['createCarrierAccount'][0])
    {

        // verify the required parameter 'connect_existing_own_account_request' is set
        if ($connect_existing_own_account_request === null || (is_array($connect_existing_own_account_request) && count($connect_existing_own_account_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connect_existing_own_account_request when calling createCarrierAccount'
            );
        }



        $resourcePath = '/carrier_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($shippo_api_version !== null) {
            $headerParams['SHIPPO-API-VERSION'] = ObjectSerializer::toHeaderValue($shippo_api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($connect_existing_own_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($connect_existing_own_account_request));
            } else {
                $httpBody = $connect_existing_own_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarrierAccount
     *
     * Retrieve a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>
     */
    public function getCarrierAccount($carrier_account_id, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierAccount'][0])
    {
        list($response) = $this->getCarrierAccountWithHttpInfo($carrier_account_id, $shippo_api_version, $contentType);
        return $response;
    }

    /**
     * Operation getCarrierAccountWithHttpInfo
     *
     * Retrieve a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierAccountWithHttpInfo($carrier_account_id, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierAccount'][0])
    {
        $request = $this->getCarrierAccountRequest($carrier_account_id, $shippo_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CarrierAccount',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCarrierAccountAsync
     *
     * Retrieve a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierAccountAsync($carrier_account_id, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierAccount'][0])
    {
        return $this->getCarrierAccountAsyncWithHttpInfo($carrier_account_id, $shippo_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierAccountAsyncWithHttpInfo
     *
     * Retrieve a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierAccountAsyncWithHttpInfo($carrier_account_id, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CarrierAccount';
        $request = $this->getCarrierAccountRequest($carrier_account_id, $shippo_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierAccount'
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCarrierAccountRequest($carrier_account_id, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierAccount'][0])
    {

        // verify the required parameter 'carrier_account_id' is set
        if ($carrier_account_id === null || (is_array($carrier_account_id) && count($carrier_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_account_id when calling getCarrierAccount'
            );
        }



        $resourcePath = '/carrier_accounts/{CarrierAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($shippo_api_version !== null) {
            $headerParams['SHIPPO-API-VERSION'] = ObjectSerializer::toHeaderValue($shippo_api_version);
        }

        // path params
        if ($carrier_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierAccountId' . '}',
                ObjectSerializer::toPathValue($carrier_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarrierRegistrationStatus
     *
     * Get Carrier Registration status
     *
     * @param  string $carrier filter by specific carrier (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierRegistrationStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CarrierAccountRegistrationStatus|array<string,mixed>
     */
    public function getCarrierRegistrationStatus($carrier, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierRegistrationStatus'][0])
    {
        list($response) = $this->getCarrierRegistrationStatusWithHttpInfo($carrier, $shippo_api_version, $contentType);
        return $response;
    }

    /**
     * Operation getCarrierRegistrationStatusWithHttpInfo
     *
     * Get Carrier Registration status
     *
     * @param  string $carrier filter by specific carrier (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierRegistrationStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CarrierAccountRegistrationStatus|array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierRegistrationStatusWithHttpInfo($carrier, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierRegistrationStatus'][0])
    {
        $request = $this->getCarrierRegistrationStatusRequest($carrier, $shippo_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CarrierAccountRegistrationStatus',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CarrierAccountRegistrationStatus',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CarrierAccountRegistrationStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCarrierRegistrationStatusAsync
     *
     * Get Carrier Registration status
     *
     * @param  string $carrier filter by specific carrier (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierRegistrationStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierRegistrationStatusAsync($carrier, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierRegistrationStatus'][0])
    {
        return $this->getCarrierRegistrationStatusAsyncWithHttpInfo($carrier, $shippo_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierRegistrationStatusAsyncWithHttpInfo
     *
     * Get Carrier Registration status
     *
     * @param  string $carrier filter by specific carrier (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierRegistrationStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierRegistrationStatusAsyncWithHttpInfo($carrier, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierRegistrationStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CarrierAccountRegistrationStatus';
        $request = $this->getCarrierRegistrationStatusRequest($carrier, $shippo_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierRegistrationStatus'
     *
     * @param  string $carrier filter by specific carrier (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCarrierRegistrationStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCarrierRegistrationStatusRequest($carrier, $shippo_api_version = null, string $contentType = self::contentTypes['getCarrierRegistrationStatus'][0])
    {

        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling getCarrierRegistrationStatus'
            );
        }



        $resourcePath = '/carrier_accounts/reg-status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier,
            'carrier', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($shippo_api_version !== null) {
            $headerParams['SHIPPO-API-VERSION'] = ObjectSerializer::toHeaderValue($shippo_api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation initiateOauth2Signin
     *
     * Connect an existing carrier account using OAuth 2.0
     *
     * @param  string $carrier_account_object_id The carrier account ID (UUID) to start a signin process. (required)
     * @param  string $redirect_uri Callback URL. The URL that tells the authorization server where to send the user back to after they approve the request. (required)
     * @param  string|null $state A random string generated by the consuming application and included in the request to prevent CSRF attacks. The consuming application checks that the same value is returned after the user authorizes Shippo. (optional)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiateOauth2Signin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function initiateOauth2Signin($carrier_account_object_id, $redirect_uri, $state = null, $shippo_api_version = null, string $contentType = self::contentTypes['initiateOauth2Signin'][0])
    {
        $this->initiateOauth2SigninWithHttpInfo($carrier_account_object_id, $redirect_uri, $state, $shippo_api_version, $contentType);
    }

    /**
     * Operation initiateOauth2SigninWithHttpInfo
     *
     * Connect an existing carrier account using OAuth 2.0
     *
     * @param  string $carrier_account_object_id The carrier account ID (UUID) to start a signin process. (required)
     * @param  string $redirect_uri Callback URL. The URL that tells the authorization server where to send the user back to after they approve the request. (required)
     * @param  string|null $state A random string generated by the consuming application and included in the request to prevent CSRF attacks. The consuming application checks that the same value is returned after the user authorizes Shippo. (optional)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiateOauth2Signin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function initiateOauth2SigninWithHttpInfo($carrier_account_object_id, $redirect_uri, $state = null, $shippo_api_version = null, string $contentType = self::contentTypes['initiateOauth2Signin'][0])
    {
        $request = $this->initiateOauth2SigninRequest($carrier_account_object_id, $redirect_uri, $state, $shippo_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InitiateOauth2Signin400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InitiateOauth2Signin401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InitiateOauth2Signin404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation initiateOauth2SigninAsync
     *
     * Connect an existing carrier account using OAuth 2.0
     *
     * @param  string $carrier_account_object_id The carrier account ID (UUID) to start a signin process. (required)
     * @param  string $redirect_uri Callback URL. The URL that tells the authorization server where to send the user back to after they approve the request. (required)
     * @param  string|null $state A random string generated by the consuming application and included in the request to prevent CSRF attacks. The consuming application checks that the same value is returned after the user authorizes Shippo. (optional)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiateOauth2Signin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function initiateOauth2SigninAsync($carrier_account_object_id, $redirect_uri, $state = null, $shippo_api_version = null, string $contentType = self::contentTypes['initiateOauth2Signin'][0])
    {
        return $this->initiateOauth2SigninAsyncWithHttpInfo($carrier_account_object_id, $redirect_uri, $state, $shippo_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation initiateOauth2SigninAsyncWithHttpInfo
     *
     * Connect an existing carrier account using OAuth 2.0
     *
     * @param  string $carrier_account_object_id The carrier account ID (UUID) to start a signin process. (required)
     * @param  string $redirect_uri Callback URL. The URL that tells the authorization server where to send the user back to after they approve the request. (required)
     * @param  string|null $state A random string generated by the consuming application and included in the request to prevent CSRF attacks. The consuming application checks that the same value is returned after the user authorizes Shippo. (optional)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiateOauth2Signin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function initiateOauth2SigninAsyncWithHttpInfo($carrier_account_object_id, $redirect_uri, $state = null, $shippo_api_version = null, string $contentType = self::contentTypes['initiateOauth2Signin'][0])
    {
        $returnType = '';
        $request = $this->initiateOauth2SigninRequest($carrier_account_object_id, $redirect_uri, $state, $shippo_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'initiateOauth2Signin'
     *
     * @param  string $carrier_account_object_id The carrier account ID (UUID) to start a signin process. (required)
     * @param  string $redirect_uri Callback URL. The URL that tells the authorization server where to send the user back to after they approve the request. (required)
     * @param  string|null $state A random string generated by the consuming application and included in the request to prevent CSRF attacks. The consuming application checks that the same value is returned after the user authorizes Shippo. (optional)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initiateOauth2Signin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function initiateOauth2SigninRequest($carrier_account_object_id, $redirect_uri, $state = null, $shippo_api_version = null, string $contentType = self::contentTypes['initiateOauth2Signin'][0])
    {

        // verify the required parameter 'carrier_account_object_id' is set
        if ($carrier_account_object_id === null || (is_array($carrier_account_object_id) && count($carrier_account_object_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_account_object_id when calling initiateOauth2Signin'
            );
        }

        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null || (is_array($redirect_uri) && count($redirect_uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_uri when calling initiateOauth2Signin'
            );
        }




        $resourcePath = '/carrier_accounts/{CarrierAccountObjectId}/signin/initiate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $redirect_uri,
            'redirect_uri', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($shippo_api_version !== null) {
            $headerParams['SHIPPO-API-VERSION'] = ObjectSerializer::toHeaderValue($shippo_api_version);
        }

        // path params
        if ($carrier_account_object_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierAccountObjectId' . '}',
                ObjectSerializer::toPathValue($carrier_account_object_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCarrierAccounts
     *
     * List all carrier accounts
     *
     * @param  bool|null $service_levels Appends the property &#x60;service_levels&#x60; to each returned carrier account (optional)
     * @param  \OpenAPI\Client\Model\CarriersEnum|null $carrier Filter the response by the specified carrier (optional)
     * @param  string|null $account_id Filter the response by the specified carrier account Id (optional)
     * @param  int|null $page The page number you want to select (optional, default to 1)
     * @param  int|null $results The number of results to return per page (max 100, default 5) (optional, default to 5)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCarrierAccounts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CarrierAccountPaginatedList|array<string,mixed>
     */
    public function listCarrierAccounts($service_levels = null, $carrier = null, $account_id = null, $page = 1, $results = 5, $shippo_api_version = null, string $contentType = self::contentTypes['listCarrierAccounts'][0])
    {
        list($response) = $this->listCarrierAccountsWithHttpInfo($service_levels, $carrier, $account_id, $page, $results, $shippo_api_version, $contentType);
        return $response;
    }

    /**
     * Operation listCarrierAccountsWithHttpInfo
     *
     * List all carrier accounts
     *
     * @param  bool|null $service_levels Appends the property &#x60;service_levels&#x60; to each returned carrier account (optional)
     * @param  \OpenAPI\Client\Model\CarriersEnum|null $carrier Filter the response by the specified carrier (optional)
     * @param  string|null $account_id Filter the response by the specified carrier account Id (optional)
     * @param  int|null $page The page number you want to select (optional, default to 1)
     * @param  int|null $results The number of results to return per page (max 100, default 5) (optional, default to 5)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCarrierAccounts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CarrierAccountPaginatedList|array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCarrierAccountsWithHttpInfo($service_levels = null, $carrier = null, $account_id = null, $page = 1, $results = 5, $shippo_api_version = null, string $contentType = self::contentTypes['listCarrierAccounts'][0])
    {
        $request = $this->listCarrierAccountsRequest($service_levels, $carrier, $account_id, $page, $results, $shippo_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CarrierAccountPaginatedList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CarrierAccountPaginatedList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CarrierAccountPaginatedList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listCarrierAccountsAsync
     *
     * List all carrier accounts
     *
     * @param  bool|null $service_levels Appends the property &#x60;service_levels&#x60; to each returned carrier account (optional)
     * @param  \OpenAPI\Client\Model\CarriersEnum|null $carrier Filter the response by the specified carrier (optional)
     * @param  string|null $account_id Filter the response by the specified carrier account Id (optional)
     * @param  int|null $page The page number you want to select (optional, default to 1)
     * @param  int|null $results The number of results to return per page (max 100, default 5) (optional, default to 5)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCarrierAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCarrierAccountsAsync($service_levels = null, $carrier = null, $account_id = null, $page = 1, $results = 5, $shippo_api_version = null, string $contentType = self::contentTypes['listCarrierAccounts'][0])
    {
        return $this->listCarrierAccountsAsyncWithHttpInfo($service_levels, $carrier, $account_id, $page, $results, $shippo_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCarrierAccountsAsyncWithHttpInfo
     *
     * List all carrier accounts
     *
     * @param  bool|null $service_levels Appends the property &#x60;service_levels&#x60; to each returned carrier account (optional)
     * @param  \OpenAPI\Client\Model\CarriersEnum|null $carrier Filter the response by the specified carrier (optional)
     * @param  string|null $account_id Filter the response by the specified carrier account Id (optional)
     * @param  int|null $page The page number you want to select (optional, default to 1)
     * @param  int|null $results The number of results to return per page (max 100, default 5) (optional, default to 5)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCarrierAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCarrierAccountsAsyncWithHttpInfo($service_levels = null, $carrier = null, $account_id = null, $page = 1, $results = 5, $shippo_api_version = null, string $contentType = self::contentTypes['listCarrierAccounts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CarrierAccountPaginatedList';
        $request = $this->listCarrierAccountsRequest($service_levels, $carrier, $account_id, $page, $results, $shippo_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCarrierAccounts'
     *
     * @param  bool|null $service_levels Appends the property &#x60;service_levels&#x60; to each returned carrier account (optional)
     * @param  \OpenAPI\Client\Model\CarriersEnum|null $carrier Filter the response by the specified carrier (optional)
     * @param  string|null $account_id Filter the response by the specified carrier account Id (optional)
     * @param  int|null $page The page number you want to select (optional, default to 1)
     * @param  int|null $results The number of results to return per page (max 100, default 5) (optional, default to 5)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCarrierAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCarrierAccountsRequest($service_levels = null, $carrier = null, $account_id = null, $page = 1, $results = 5, $shippo_api_version = null, string $contentType = self::contentTypes['listCarrierAccounts'][0])
    {





        if ($results !== null && $results > 100) {
            throw new \InvalidArgumentException('invalid value for "$results" when calling CarrierAccountsApi.listCarrierAccounts, must be smaller than or equal to 100.');
        }
        


        $resourcePath = '/carrier_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_levels,
            'service_levels', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $carrier,
            'carrier', // param base name
            'CarriersEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $results,
            'results', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($shippo_api_version !== null) {
            $headerParams['SHIPPO-API-VERSION'] = ObjectSerializer::toHeaderValue($shippo_api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerCarrierAccount
     *
     * Add a Shippo carrier account
     *
     * @param  \OpenAPI\Client\Model\RegisterCarrierAccountRequest $register_carrier_account_request The body of the request. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>
     */
    public function registerCarrierAccount($register_carrier_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['registerCarrierAccount'][0])
    {
        list($response) = $this->registerCarrierAccountWithHttpInfo($register_carrier_account_request, $shippo_api_version, $contentType);
        return $response;
    }

    /**
     * Operation registerCarrierAccountWithHttpInfo
     *
     * Add a Shippo carrier account
     *
     * @param  \OpenAPI\Client\Model\RegisterCarrierAccountRequest $register_carrier_account_request The body of the request. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerCarrierAccountWithHttpInfo($register_carrier_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['registerCarrierAccount'][0])
    {
        $request = $this->registerCarrierAccountRequest($register_carrier_account_request, $shippo_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CarrierAccount',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation registerCarrierAccountAsync
     *
     * Add a Shippo carrier account
     *
     * @param  \OpenAPI\Client\Model\RegisterCarrierAccountRequest $register_carrier_account_request The body of the request. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerCarrierAccountAsync($register_carrier_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['registerCarrierAccount'][0])
    {
        return $this->registerCarrierAccountAsyncWithHttpInfo($register_carrier_account_request, $shippo_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerCarrierAccountAsyncWithHttpInfo
     *
     * Add a Shippo carrier account
     *
     * @param  \OpenAPI\Client\Model\RegisterCarrierAccountRequest $register_carrier_account_request The body of the request. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerCarrierAccountAsyncWithHttpInfo($register_carrier_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['registerCarrierAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CarrierAccount';
        $request = $this->registerCarrierAccountRequest($register_carrier_account_request, $shippo_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerCarrierAccount'
     *
     * @param  \OpenAPI\Client\Model\RegisterCarrierAccountRequest $register_carrier_account_request The body of the request. (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerCarrierAccountRequest($register_carrier_account_request, $shippo_api_version = null, string $contentType = self::contentTypes['registerCarrierAccount'][0])
    {

        // verify the required parameter 'register_carrier_account_request' is set
        if ($register_carrier_account_request === null || (is_array($register_carrier_account_request) && count($register_carrier_account_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_carrier_account_request when calling registerCarrierAccount'
            );
        }



        $resourcePath = '/carrier_accounts/register/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($shippo_api_version !== null) {
            $headerParams['SHIPPO-API-VERSION'] = ObjectSerializer::toHeaderValue($shippo_api_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($register_carrier_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($register_carrier_account_request));
            } else {
                $httpBody = $register_carrier_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCarrierAccount
     *
     * Update a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  \OpenAPI\Client\Model\CarrierAccountUpdateRequest|null $carrier_account_update_request Examples. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>
     */
    public function updateCarrierAccount($carrier_account_id, $shippo_api_version = null, $carrier_account_update_request = null, string $contentType = self::contentTypes['updateCarrierAccount'][0])
    {
        list($response) = $this->updateCarrierAccountWithHttpInfo($carrier_account_id, $shippo_api_version, $carrier_account_update_request, $contentType);
        return $response;
    }

    /**
     * Operation updateCarrierAccountWithHttpInfo
     *
     * Update a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  \OpenAPI\Client\Model\CarrierAccountUpdateRequest|null $carrier_account_update_request Examples. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCarrierAccount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CarrierAccount|array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCarrierAccountWithHttpInfo($carrier_account_id, $shippo_api_version = null, $carrier_account_update_request = null, string $contentType = self::contentTypes['updateCarrierAccount'][0])
    {
        $request = $this->updateCarrierAccountRequest($carrier_account_id, $shippo_api_version, $carrier_account_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CarrierAccount',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CarrierAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateCarrierAccountAsync
     *
     * Update a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  \OpenAPI\Client\Model\CarrierAccountUpdateRequest|null $carrier_account_update_request Examples. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCarrierAccountAsync($carrier_account_id, $shippo_api_version = null, $carrier_account_update_request = null, string $contentType = self::contentTypes['updateCarrierAccount'][0])
    {
        return $this->updateCarrierAccountAsyncWithHttpInfo($carrier_account_id, $shippo_api_version, $carrier_account_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCarrierAccountAsyncWithHttpInfo
     *
     * Update a carrier account
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  \OpenAPI\Client\Model\CarrierAccountUpdateRequest|null $carrier_account_update_request Examples. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCarrierAccountAsyncWithHttpInfo($carrier_account_id, $shippo_api_version = null, $carrier_account_update_request = null, string $contentType = self::contentTypes['updateCarrierAccount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CarrierAccount';
        $request = $this->updateCarrierAccountRequest($carrier_account_id, $shippo_api_version, $carrier_account_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCarrierAccount'
     *
     * @param  string $carrier_account_id Object ID of the carrier account (required)
     * @param  string|null $shippo_api_version Optional string used to pick a non-default API version to use. See our &lt;a href&#x3D;\&quot;https://docs.goshippo.com/docs/api_concepts/apiversioning/\&quot;&gt;API version&lt;/a&gt; guide. (optional)
     * @param  \OpenAPI\Client\Model\CarrierAccountUpdateRequest|null $carrier_account_update_request Examples. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCarrierAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCarrierAccountRequest($carrier_account_id, $shippo_api_version = null, $carrier_account_update_request = null, string $contentType = self::contentTypes['updateCarrierAccount'][0])
    {

        // verify the required parameter 'carrier_account_id' is set
        if ($carrier_account_id === null || (is_array($carrier_account_id) && count($carrier_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_account_id when calling updateCarrierAccount'
            );
        }




        $resourcePath = '/carrier_accounts/{CarrierAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($shippo_api_version !== null) {
            $headerParams['SHIPPO-API-VERSION'] = ObjectSerializer::toHeaderValue($shippo_api_version);
        }

        // path params
        if ($carrier_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierAccountId' . '}',
                ObjectSerializer::toPathValue($carrier_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($carrier_account_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($carrier_account_update_request));
            } else {
                $httpBody = $carrier_account_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
