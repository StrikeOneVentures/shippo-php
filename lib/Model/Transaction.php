<?php
/**
 * Transaction
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commercial_invoice_url' => 'string',
        'created_by' => '\OpenAPI\Client\Model\TransactionCreatedBy',
        'eta' => 'string',
        'label_file_type' => '\OpenAPI\Client\Model\LabelFileTypeEnum',
        'label_url' => 'string',
        'messages' => '\OpenAPI\Client\Model\ResponseMessage[]',
        'metadata' => 'string',
        'object_created' => '\DateTime',
        'object_id' => 'string',
        'object_owner' => 'string',
        'object_state' => '\OpenAPI\Client\Model\ObjectStateEnum',
        'object_updated' => '\DateTime',
        'parcel' => 'string',
        'qr_code_url' => 'string',
        'rate' => '\OpenAPI\Client\Model\TransactionRate',
        'status' => '\OpenAPI\Client\Model\TransactionStatusEnum',
        'test' => 'bool',
        'tracking_number' => 'string',
        'tracking_status' => '\OpenAPI\Client\Model\TrackingStatusEnum',
        'tracking_url_provider' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'commercial_invoice_url' => null,
        'created_by' => null,
        'eta' => null,
        'label_file_type' => null,
        'label_url' => null,
        'messages' => null,
        'metadata' => null,
        'object_created' => 'date-time',
        'object_id' => null,
        'object_owner' => null,
        'object_state' => null,
        'object_updated' => 'date-time',
        'parcel' => null,
        'qr_code_url' => null,
        'rate' => null,
        'status' => null,
        'test' => null,
        'tracking_number' => null,
        'tracking_status' => null,
        'tracking_url_provider' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'commercial_invoice_url' => false,
        'created_by' => true,
        'eta' => false,
        'label_file_type' => false,
        'label_url' => false,
        'messages' => false,
        'metadata' => false,
        'object_created' => false,
        'object_id' => false,
        'object_owner' => false,
        'object_state' => false,
        'object_updated' => false,
        'parcel' => false,
        'qr_code_url' => false,
        'rate' => false,
        'status' => false,
        'test' => false,
        'tracking_number' => false,
        'tracking_status' => false,
        'tracking_url_provider' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commercial_invoice_url' => 'commercial_invoice_url',
        'created_by' => 'created_by',
        'eta' => 'eta',
        'label_file_type' => 'label_file_type',
        'label_url' => 'label_url',
        'messages' => 'messages',
        'metadata' => 'metadata',
        'object_created' => 'object_created',
        'object_id' => 'object_id',
        'object_owner' => 'object_owner',
        'object_state' => 'object_state',
        'object_updated' => 'object_updated',
        'parcel' => 'parcel',
        'qr_code_url' => 'qr_code_url',
        'rate' => 'rate',
        'status' => 'status',
        'test' => 'test',
        'tracking_number' => 'tracking_number',
        'tracking_status' => 'tracking_status',
        'tracking_url_provider' => 'tracking_url_provider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commercial_invoice_url' => 'setCommercialInvoiceUrl',
        'created_by' => 'setCreatedBy',
        'eta' => 'setEta',
        'label_file_type' => 'setLabelFileType',
        'label_url' => 'setLabelUrl',
        'messages' => 'setMessages',
        'metadata' => 'setMetadata',
        'object_created' => 'setObjectCreated',
        'object_id' => 'setObjectId',
        'object_owner' => 'setObjectOwner',
        'object_state' => 'setObjectState',
        'object_updated' => 'setObjectUpdated',
        'parcel' => 'setParcel',
        'qr_code_url' => 'setQrCodeUrl',
        'rate' => 'setRate',
        'status' => 'setStatus',
        'test' => 'setTest',
        'tracking_number' => 'setTrackingNumber',
        'tracking_status' => 'setTrackingStatus',
        'tracking_url_provider' => 'setTrackingUrlProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commercial_invoice_url' => 'getCommercialInvoiceUrl',
        'created_by' => 'getCreatedBy',
        'eta' => 'getEta',
        'label_file_type' => 'getLabelFileType',
        'label_url' => 'getLabelUrl',
        'messages' => 'getMessages',
        'metadata' => 'getMetadata',
        'object_created' => 'getObjectCreated',
        'object_id' => 'getObjectId',
        'object_owner' => 'getObjectOwner',
        'object_state' => 'getObjectState',
        'object_updated' => 'getObjectUpdated',
        'parcel' => 'getParcel',
        'qr_code_url' => 'getQrCodeUrl',
        'rate' => 'getRate',
        'status' => 'getStatus',
        'test' => 'getTest',
        'tracking_number' => 'getTrackingNumber',
        'tracking_status' => 'getTrackingStatus',
        'tracking_url_provider' => 'getTrackingUrlProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('commercial_invoice_url', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('eta', $data ?? [], null);
        $this->setIfExists('label_file_type', $data ?? [], null);
        $this->setIfExists('label_url', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('object_created', $data ?? [], null);
        $this->setIfExists('object_id', $data ?? [], null);
        $this->setIfExists('object_owner', $data ?? [], null);
        $this->setIfExists('object_state', $data ?? [], null);
        $this->setIfExists('object_updated', $data ?? [], null);
        $this->setIfExists('parcel', $data ?? [], null);
        $this->setIfExists('qr_code_url', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('test', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('tracking_status', $data ?? [], null);
        $this->setIfExists('tracking_url_provider', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commercial_invoice_url
     *
     * @return string|null
     */
    public function getCommercialInvoiceUrl()
    {
        return $this->container['commercial_invoice_url'];
    }

    /**
     * Sets commercial_invoice_url
     *
     * @param string|null $commercial_invoice_url A URL pointing to the commercial invoice as a 8.5x11 inch PDF file.  A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     *
     * @return self
     */
    public function setCommercialInvoiceUrl($commercial_invoice_url)
    {
        if (is_null($commercial_invoice_url)) {
            throw new \InvalidArgumentException('non-nullable commercial_invoice_url cannot be null');
        }
        $this->container['commercial_invoice_url'] = $commercial_invoice_url;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \OpenAPI\Client\Model\TransactionCreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \OpenAPI\Client\Model\TransactionCreatedBy|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets eta
     *
     * @return string|null
     */
    public function getEta()
    {
        return $this->container['eta'];
    }

    /**
     * Sets eta
     *
     * @param string|null $eta The estimated time of arrival according to the carrier.
     *
     * @return self
     */
    public function setEta($eta)
    {
        if (is_null($eta)) {
            throw new \InvalidArgumentException('non-nullable eta cannot be null');
        }
        $this->container['eta'] = $eta;

        return $this;
    }

    /**
     * Gets label_file_type
     *
     * @return \OpenAPI\Client\Model\LabelFileTypeEnum|null
     */
    public function getLabelFileType()
    {
        return $this->container['label_file_type'];
    }

    /**
     * Sets label_file_type
     *
     * @param \OpenAPI\Client\Model\LabelFileTypeEnum|null $label_file_type label_file_type
     *
     * @return self
     */
    public function setLabelFileType($label_file_type)
    {
        if (is_null($label_file_type)) {
            throw new \InvalidArgumentException('non-nullable label_file_type cannot be null');
        }
        $this->container['label_file_type'] = $label_file_type;

        return $this;
    }

    /**
     * Gets label_url
     *
     * @return string|null
     */
    public function getLabelUrl()
    {
        return $this->container['label_url'];
    }

    /**
     * Sets label_url
     *
     * @param string|null $label_url A URL pointing directly to the label in the format you've set in your settings.  A value will only be returned if the Transactions has been processed successfully.
     *
     * @return self
     */
    public function setLabelUrl($label_url)
    {
        if (is_null($label_url)) {
            throw new \InvalidArgumentException('non-nullable label_url cannot be null');
        }
        $this->container['label_url'] = $label_url;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \OpenAPI\Client\Model\ResponseMessage[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \OpenAPI\Client\Model\ResponseMessage[]|null $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata A string of up to 100 characters that can be filled with any additional information you want to  attach to the object.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets object_created
     *
     * @return \DateTime|null
     */
    public function getObjectCreated()
    {
        return $this->container['object_created'];
    }

    /**
     * Sets object_created
     *
     * @param \DateTime|null $object_created Date and time of Transaction creation.
     *
     * @return self
     */
    public function setObjectCreated($object_created)
    {
        if (is_null($object_created)) {
            throw new \InvalidArgumentException('non-nullable object_created cannot be null');
        }
        $this->container['object_created'] = $object_created;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string|null $object_id Unique identifier of the given Transaction object.
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets object_owner
     *
     * @return string|null
     */
    public function getObjectOwner()
    {
        return $this->container['object_owner'];
    }

    /**
     * Sets object_owner
     *
     * @param string|null $object_owner Username of the user who created the Transaction object.
     *
     * @return self
     */
    public function setObjectOwner($object_owner)
    {
        if (is_null($object_owner)) {
            throw new \InvalidArgumentException('non-nullable object_owner cannot be null');
        }
        $this->container['object_owner'] = $object_owner;

        return $this;
    }

    /**
     * Gets object_state
     *
     * @return \OpenAPI\Client\Model\ObjectStateEnum|null
     */
    public function getObjectState()
    {
        return $this->container['object_state'];
    }

    /**
     * Sets object_state
     *
     * @param \OpenAPI\Client\Model\ObjectStateEnum|null $object_state object_state
     *
     * @return self
     */
    public function setObjectState($object_state)
    {
        if (is_null($object_state)) {
            throw new \InvalidArgumentException('non-nullable object_state cannot be null');
        }
        $this->container['object_state'] = $object_state;

        return $this;
    }

    /**
     * Gets object_updated
     *
     * @return \DateTime|null
     */
    public function getObjectUpdated()
    {
        return $this->container['object_updated'];
    }

    /**
     * Sets object_updated
     *
     * @param \DateTime|null $object_updated Date and time of last Transaction update.
     *
     * @return self
     */
    public function setObjectUpdated($object_updated)
    {
        if (is_null($object_updated)) {
            throw new \InvalidArgumentException('non-nullable object_updated cannot be null');
        }
        $this->container['object_updated'] = $object_updated;

        return $this;
    }

    /**
     * Gets parcel
     *
     * @return string|null
     */
    public function getParcel()
    {
        return $this->container['parcel'];
    }

    /**
     * Sets parcel
     *
     * @param string|null $parcel Object ID of the Parcel object that is being shipped.
     *
     * @return self
     */
    public function setParcel($parcel)
    {
        if (is_null($parcel)) {
            throw new \InvalidArgumentException('non-nullable parcel cannot be null');
        }
        $this->container['parcel'] = $parcel;

        return $this;
    }

    /**
     * Gets qr_code_url
     *
     * @return string|null
     */
    public function getQrCodeUrl()
    {
        return $this->container['qr_code_url'];
    }

    /**
     * Sets qr_code_url
     *
     * @param string|null $qr_code_url A URL pointing directly to the QR code in PNG format.  A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     *
     * @return self
     */
    public function setQrCodeUrl($qr_code_url)
    {
        if (is_null($qr_code_url)) {
            throw new \InvalidArgumentException('non-nullable qr_code_url cannot be null');
        }
        $this->container['qr_code_url'] = $qr_code_url;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return \OpenAPI\Client\Model\TransactionRate|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param \OpenAPI\Client\Model\TransactionRate|null $rate rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\TransactionStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\TransactionStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool|null
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool|null $test Indicates whether the object has been created in test mode.
     *
     * @return self
     */
    public function setTest($test)
    {
        if (is_null($test)) {
            throw new \InvalidArgumentException('non-nullable test cannot be null');
        }
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number The carrier-specific tracking number that can be used to track the Shipment.  A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_status
     *
     * @return \OpenAPI\Client\Model\TrackingStatusEnum|null
     */
    public function getTrackingStatus()
    {
        return $this->container['tracking_status'];
    }

    /**
     * Sets tracking_status
     *
     * @param \OpenAPI\Client\Model\TrackingStatusEnum|null $tracking_status tracking_status
     *
     * @return self
     */
    public function setTrackingStatus($tracking_status)
    {
        if (is_null($tracking_status)) {
            throw new \InvalidArgumentException('non-nullable tracking_status cannot be null');
        }
        $this->container['tracking_status'] = $tracking_status;

        return $this;
    }

    /**
     * Gets tracking_url_provider
     *
     * @return string|null
     */
    public function getTrackingUrlProvider()
    {
        return $this->container['tracking_url_provider'];
    }

    /**
     * Sets tracking_url_provider
     *
     * @param string|null $tracking_url_provider A link to track this item on the carrier-provided tracking website.  A value will only be returned if tracking is available and the carrier provides such a service.
     *
     * @return self
     */
    public function setTrackingUrlProvider($tracking_url_provider)
    {
        if (is_null($tracking_url_provider)) {
            throw new \InvalidArgumentException('non-nullable tracking_url_provider cannot be null');
        }
        $this->container['tracking_url_provider'] = $tracking_url_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


