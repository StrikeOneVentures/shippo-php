<?php
/**
 * Pickup
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Pickup Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Pickup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pickup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier_account' => 'string',
        'location' => '\OpenAPI\Client\Model\Location',
        'metadata' => 'string',
        'requested_end_time' => '\DateTime',
        'requested_start_time' => '\DateTime',
        'transactions' => 'string[]',
        'object_created' => '\DateTime',
        'object_id' => 'string',
        'object_updated' => '\DateTime',
        'confirmed_start_time' => 'string',
        'confirmed_end_time' => 'string',
        'cancel_by_time' => 'string',
        'status' => 'string',
        'confirmation_code' => 'string',
        'timezone' => 'string',
        'messages' => 'string[]',
        'is_test' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrier_account' => null,
        'location' => null,
        'metadata' => null,
        'requested_end_time' => 'date-time',
        'requested_start_time' => 'date-time',
        'transactions' => null,
        'object_created' => 'date-time',
        'object_id' => null,
        'object_updated' => 'date-time',
        'confirmed_start_time' => 'datetime',
        'confirmed_end_time' => 'datetime',
        'cancel_by_time' => 'datetime',
        'status' => null,
        'confirmation_code' => null,
        'timezone' => null,
        'messages' => null,
        'is_test' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carrier_account' => false,
        'location' => false,
        'metadata' => false,
        'requested_end_time' => false,
        'requested_start_time' => false,
        'transactions' => false,
        'object_created' => false,
        'object_id' => false,
        'object_updated' => false,
        'confirmed_start_time' => false,
        'confirmed_end_time' => false,
        'cancel_by_time' => false,
        'status' => false,
        'confirmation_code' => false,
        'timezone' => false,
        'messages' => false,
        'is_test' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_account' => 'carrier_account',
        'location' => 'location',
        'metadata' => 'metadata',
        'requested_end_time' => 'requested_end_time',
        'requested_start_time' => 'requested_start_time',
        'transactions' => 'transactions',
        'object_created' => 'object_created',
        'object_id' => 'object_id',
        'object_updated' => 'object_updated',
        'confirmed_start_time' => 'confirmed_start_time',
        'confirmed_end_time' => 'confirmed_end_time',
        'cancel_by_time' => 'cancel_by_time',
        'status' => 'status',
        'confirmation_code' => 'confirmation_code',
        'timezone' => 'timezone',
        'messages' => 'messages',
        'is_test' => 'is_test'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_account' => 'setCarrierAccount',
        'location' => 'setLocation',
        'metadata' => 'setMetadata',
        'requested_end_time' => 'setRequestedEndTime',
        'requested_start_time' => 'setRequestedStartTime',
        'transactions' => 'setTransactions',
        'object_created' => 'setObjectCreated',
        'object_id' => 'setObjectId',
        'object_updated' => 'setObjectUpdated',
        'confirmed_start_time' => 'setConfirmedStartTime',
        'confirmed_end_time' => 'setConfirmedEndTime',
        'cancel_by_time' => 'setCancelByTime',
        'status' => 'setStatus',
        'confirmation_code' => 'setConfirmationCode',
        'timezone' => 'setTimezone',
        'messages' => 'setMessages',
        'is_test' => 'setIsTest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_account' => 'getCarrierAccount',
        'location' => 'getLocation',
        'metadata' => 'getMetadata',
        'requested_end_time' => 'getRequestedEndTime',
        'requested_start_time' => 'getRequestedStartTime',
        'transactions' => 'getTransactions',
        'object_created' => 'getObjectCreated',
        'object_id' => 'getObjectId',
        'object_updated' => 'getObjectUpdated',
        'confirmed_start_time' => 'getConfirmedStartTime',
        'confirmed_end_time' => 'getConfirmedEndTime',
        'cancel_by_time' => 'getCancelByTime',
        'status' => 'getStatus',
        'confirmation_code' => 'getConfirmationCode',
        'timezone' => 'getTimezone',
        'messages' => 'getMessages',
        'is_test' => 'getIsTest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PENDING = 'PENDING';
    public const STATUS_CONFIRMED = 'CONFIRMED';
    public const STATUS_ERROR = 'ERROR';
    public const STATUS_CANCELLED = 'CANCELLED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_CONFIRMED,
            self::STATUS_ERROR,
            self::STATUS_CANCELLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('carrier_account', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('requested_end_time', $data ?? [], null);
        $this->setIfExists('requested_start_time', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('object_created', $data ?? [], null);
        $this->setIfExists('object_id', $data ?? [], null);
        $this->setIfExists('object_updated', $data ?? [], null);
        $this->setIfExists('confirmed_start_time', $data ?? [], null);
        $this->setIfExists('confirmed_end_time', $data ?? [], null);
        $this->setIfExists('cancel_by_time', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('confirmation_code', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('is_test', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier_account'] === null) {
            $invalidProperties[] = "'carrier_account' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['requested_end_time'] === null) {
            $invalidProperties[] = "'requested_end_time' can't be null";
        }
        if ($this->container['requested_start_time'] === null) {
            $invalidProperties[] = "'requested_start_time' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_account
     *
     * @return string
     */
    public function getCarrierAccount()
    {
        return $this->container['carrier_account'];
    }

    /**
     * Sets carrier_account
     *
     * @param string $carrier_account The object ID of your USPS or DHL Express carrier account.  You can retrieve this from your Rate requests or our <a href=\"#tag/Carrier-Accounts/\">Carrier Accounts</a> endpoint.
     *
     * @return self
     */
    public function setCarrierAccount($carrier_account)
    {
        if (is_null($carrier_account)) {
            throw new \InvalidArgumentException('non-nullable carrier_account cannot be null');
        }
        $this->container['carrier_account'] = $carrier_account;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\Location $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata A string of up to 100 characters that can be filled with any additional information you  want to attach to the object.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets requested_end_time
     *
     * @return \DateTime
     */
    public function getRequestedEndTime()
    {
        return $this->container['requested_end_time'];
    }

    /**
     * Sets requested_end_time
     *
     * @param \DateTime $requested_end_time The latest that you requested your parcels to be available for pickup.  Expressed in the timezone specified in the response.
     *
     * @return self
     */
    public function setRequestedEndTime($requested_end_time)
    {
        if (is_null($requested_end_time)) {
            throw new \InvalidArgumentException('non-nullable requested_end_time cannot be null');
        }
        $this->container['requested_end_time'] = $requested_end_time;

        return $this;
    }

    /**
     * Gets requested_start_time
     *
     * @return \DateTime
     */
    public function getRequestedStartTime()
    {
        return $this->container['requested_start_time'];
    }

    /**
     * Sets requested_start_time
     *
     * @param \DateTime $requested_start_time The earliest that you requested your parcels to be ready for pickup.  Expressed in the timezone specified in the response.
     *
     * @return self
     */
    public function setRequestedStartTime($requested_start_time)
    {
        if (is_null($requested_start_time)) {
            throw new \InvalidArgumentException('non-nullable requested_start_time cannot be null');
        }
        $this->container['requested_start_time'] = $requested_start_time;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return string[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param string[] $transactions The transaction(s) object ID(s) for the parcel(s) that need to be picked up.
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets object_created
     *
     * @return \DateTime|null
     */
    public function getObjectCreated()
    {
        return $this->container['object_created'];
    }

    /**
     * Sets object_created
     *
     * @param \DateTime|null $object_created Date and time of Pickup creation.
     *
     * @return self
     */
    public function setObjectCreated($object_created)
    {
        if (is_null($object_created)) {
            throw new \InvalidArgumentException('non-nullable object_created cannot be null');
        }
        $this->container['object_created'] = $object_created;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string|null $object_id Unique identifier of the given Pickup object.
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets object_updated
     *
     * @return \DateTime|null
     */
    public function getObjectUpdated()
    {
        return $this->container['object_updated'];
    }

    /**
     * Sets object_updated
     *
     * @param \DateTime|null $object_updated Date and time of last Pickup update.
     *
     * @return self
     */
    public function setObjectUpdated($object_updated)
    {
        if (is_null($object_updated)) {
            throw new \InvalidArgumentException('non-nullable object_updated cannot be null');
        }
        $this->container['object_updated'] = $object_updated;

        return $this;
    }

    /**
     * Gets confirmed_start_time
     *
     * @return string|null
     */
    public function getConfirmedStartTime()
    {
        return $this->container['confirmed_start_time'];
    }

    /**
     * Sets confirmed_start_time
     *
     * @param string|null $confirmed_start_time The earliest that your parcels will be ready for pickup, confirmed by the carrier.  Expressed in the timezone specified in the response.
     *
     * @return self
     */
    public function setConfirmedStartTime($confirmed_start_time)
    {
        if (is_null($confirmed_start_time)) {
            throw new \InvalidArgumentException('non-nullable confirmed_start_time cannot be null');
        }
        $this->container['confirmed_start_time'] = $confirmed_start_time;

        return $this;
    }

    /**
     * Gets confirmed_end_time
     *
     * @return string|null
     */
    public function getConfirmedEndTime()
    {
        return $this->container['confirmed_end_time'];
    }

    /**
     * Sets confirmed_end_time
     *
     * @param string|null $confirmed_end_time The latest that your parcels will be available for pickup, confirmed by the carrier.  Expressed in the timezone specified in the response.
     *
     * @return self
     */
    public function setConfirmedEndTime($confirmed_end_time)
    {
        if (is_null($confirmed_end_time)) {
            throw new \InvalidArgumentException('non-nullable confirmed_end_time cannot be null');
        }
        $this->container['confirmed_end_time'] = $confirmed_end_time;

        return $this;
    }

    /**
     * Gets cancel_by_time
     *
     * @return string|null
     */
    public function getCancelByTime()
    {
        return $this->container['cancel_by_time'];
    }

    /**
     * Sets cancel_by_time
     *
     * @param string|null $cancel_by_time The latest time to cancel a pickup. Expressed in the timezone specified in the response.  To cancel a pickup, you will need to contact the carrier directly.  The ability to cancel a pickup through Shippo may be released in future iterations.
     *
     * @return self
     */
    public function setCancelByTime($cancel_by_time)
    {
        if (is_null($cancel_by_time)) {
            throw new \InvalidArgumentException('non-nullable cancel_by_time cannot be null');
        }
        $this->container['cancel_by_time'] = $cancel_by_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Indicates the status of the pickup.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets confirmation_code
     *
     * @return string|null
     */
    public function getConfirmationCode()
    {
        return $this->container['confirmation_code'];
    }

    /**
     * Sets confirmation_code
     *
     * @param string|null $confirmation_code Pickup's confirmation code returned by the carrier.  To edit or cancel a pickup, you will need to contact USPS or DHL Express directly and provide your `confirmation_code`.
     *
     * @return self
     */
    public function setConfirmationCode($confirmation_code)
    {
        if (is_null($confirmation_code)) {
            throw new \InvalidArgumentException('non-nullable confirmation_code cannot be null');
        }
        $this->container['confirmation_code'] = $confirmation_code;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The pickup time windows will be in the time zone specified here, not UTC.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return string[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param string[]|null $messages An array containing strings of any messages generated during validation.
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets is_test
     *
     * @return bool|null
     */
    public function getIsTest()
    {
        return $this->container['is_test'];
    }

    /**
     * Sets is_test
     *
     * @param bool|null $is_test Indicates whether the object has been created in test mode.
     *
     * @return self
     */
    public function setIsTest($is_test)
    {
        if (is_null($is_test)) {
            throw new \InvalidArgumentException('non-nullable is_test cannot be null');
        }
        $this->container['is_test'] = $is_test;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


