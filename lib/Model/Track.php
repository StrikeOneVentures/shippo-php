<?php
/**
 * Track
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Track Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Track implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Track';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_from' => '\OpenAPI\Client\Model\TrackingStatusFromLocation',
        'address_to' => '\OpenAPI\Client\Model\TrackingStatusToLocation',
        'carrier' => 'string',
        'eta' => '\DateTime',
        'messages' => 'string[]',
        'metadata' => 'string',
        'original_eta' => '\DateTime',
        'servicelevel' => '\OpenAPI\Client\Model\ServiceLevelWithParent',
        'tracking_history' => '\OpenAPI\Client\Model\TrackingStatus[]',
        'tracking_number' => 'string',
        'tracking_status' => '\OpenAPI\Client\Model\TrackingStatus',
        'transaction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_from' => null,
        'address_to' => null,
        'carrier' => null,
        'eta' => 'date-time',
        'messages' => null,
        'metadata' => null,
        'original_eta' => 'date-time',
        'servicelevel' => null,
        'tracking_history' => null,
        'tracking_number' => null,
        'tracking_status' => null,
        'transaction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_from' => false,
        'address_to' => false,
        'carrier' => false,
        'eta' => false,
        'messages' => false,
        'metadata' => false,
        'original_eta' => false,
        'servicelevel' => false,
        'tracking_history' => false,
        'tracking_number' => false,
        'tracking_status' => false,
        'transaction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_from' => 'address_from',
        'address_to' => 'address_to',
        'carrier' => 'carrier',
        'eta' => 'eta',
        'messages' => 'messages',
        'metadata' => 'metadata',
        'original_eta' => 'original_eta',
        'servicelevel' => 'servicelevel',
        'tracking_history' => 'tracking_history',
        'tracking_number' => 'tracking_number',
        'tracking_status' => 'tracking_status',
        'transaction' => 'transaction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_from' => 'setAddressFrom',
        'address_to' => 'setAddressTo',
        'carrier' => 'setCarrier',
        'eta' => 'setEta',
        'messages' => 'setMessages',
        'metadata' => 'setMetadata',
        'original_eta' => 'setOriginalEta',
        'servicelevel' => 'setServicelevel',
        'tracking_history' => 'setTrackingHistory',
        'tracking_number' => 'setTrackingNumber',
        'tracking_status' => 'setTrackingStatus',
        'transaction' => 'setTransaction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_from' => 'getAddressFrom',
        'address_to' => 'getAddressTo',
        'carrier' => 'getCarrier',
        'eta' => 'getEta',
        'messages' => 'getMessages',
        'metadata' => 'getMetadata',
        'original_eta' => 'getOriginalEta',
        'servicelevel' => 'getServicelevel',
        'tracking_history' => 'getTrackingHistory',
        'tracking_number' => 'getTrackingNumber',
        'tracking_status' => 'getTrackingStatus',
        'transaction' => 'getTransaction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address_from', $data ?? [], null);
        $this->setIfExists('address_to', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('eta', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('original_eta', $data ?? [], null);
        $this->setIfExists('servicelevel', $data ?? [], null);
        $this->setIfExists('tracking_history', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('tracking_status', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        if ($this->container['messages'] === null) {
            $invalidProperties[] = "'messages' can't be null";
        }
        if ($this->container['tracking_history'] === null) {
            $invalidProperties[] = "'tracking_history' can't be null";
        }
        if ($this->container['tracking_number'] === null) {
            $invalidProperties[] = "'tracking_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_from
     *
     * @return \OpenAPI\Client\Model\TrackingStatusFromLocation|null
     */
    public function getAddressFrom()
    {
        return $this->container['address_from'];
    }

    /**
     * Sets address_from
     *
     * @param \OpenAPI\Client\Model\TrackingStatusFromLocation|null $address_from address_from
     *
     * @return self
     */
    public function setAddressFrom($address_from)
    {
        if (is_null($address_from)) {
            throw new \InvalidArgumentException('non-nullable address_from cannot be null');
        }
        $this->container['address_from'] = $address_from;

        return $this;
    }

    /**
     * Gets address_to
     *
     * @return \OpenAPI\Client\Model\TrackingStatusToLocation|null
     */
    public function getAddressTo()
    {
        return $this->container['address_to'];
    }

    /**
     * Sets address_to
     *
     * @param \OpenAPI\Client\Model\TrackingStatusToLocation|null $address_to address_to
     *
     * @return self
     */
    public function setAddressTo($address_to)
    {
        if (is_null($address_to)) {
            throw new \InvalidArgumentException('non-nullable address_to cannot be null');
        }
        $this->container['address_to'] = $address_to;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier Name of the carrier of the shipment to track. See <a href=\"#tag/Carriers\">Carriers</a>.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets eta
     *
     * @return \DateTime|null
     */
    public function getEta()
    {
        return $this->container['eta'];
    }

    /**
     * Sets eta
     *
     * @param \DateTime|null $eta The estimated time of arrival according to the carrier, this might be updated by carriers during the life of the shipment.
     *
     * @return self
     */
    public function setEta($eta)
    {
        if (is_null($eta)) {
            throw new \InvalidArgumentException('non-nullable eta cannot be null');
        }
        $this->container['eta'] = $eta;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return string[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param string[] $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets original_eta
     *
     * @return \DateTime|null
     */
    public function getOriginalEta()
    {
        return $this->container['original_eta'];
    }

    /**
     * Sets original_eta
     *
     * @param \DateTime|null $original_eta The estimated time of arrival according to the carrier at the time the shipment first entered the system.
     *
     * @return self
     */
    public function setOriginalEta($original_eta)
    {
        if (is_null($original_eta)) {
            throw new \InvalidArgumentException('non-nullable original_eta cannot be null');
        }
        $this->container['original_eta'] = $original_eta;

        return $this;
    }

    /**
     * Gets servicelevel
     *
     * @return \OpenAPI\Client\Model\ServiceLevelWithParent|null
     */
    public function getServicelevel()
    {
        return $this->container['servicelevel'];
    }

    /**
     * Sets servicelevel
     *
     * @param \OpenAPI\Client\Model\ServiceLevelWithParent|null $servicelevel servicelevel
     *
     * @return self
     */
    public function setServicelevel($servicelevel)
    {
        if (is_null($servicelevel)) {
            throw new \InvalidArgumentException('non-nullable servicelevel cannot be null');
        }
        $this->container['servicelevel'] = $servicelevel;

        return $this;
    }

    /**
     * Gets tracking_history
     *
     * @return \OpenAPI\Client\Model\TrackingStatus[]
     */
    public function getTrackingHistory()
    {
        return $this->container['tracking_history'];
    }

    /**
     * Sets tracking_history
     *
     * @param \OpenAPI\Client\Model\TrackingStatus[] $tracking_history A list of tracking events, following the same structure as <code>tracking_status</code>.  It contains a full history of all tracking statuses, starting with the earlier tracking event first.
     *
     * @return self
     */
    public function setTrackingHistory($tracking_history)
    {
        if (is_null($tracking_history)) {
            throw new \InvalidArgumentException('non-nullable tracking_history cannot be null');
        }
        $this->container['tracking_history'] = $tracking_history;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number Tracking number to track.
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_status
     *
     * @return \OpenAPI\Client\Model\TrackingStatus|null
     */
    public function getTrackingStatus()
    {
        return $this->container['tracking_status'];
    }

    /**
     * Sets tracking_status
     *
     * @param \OpenAPI\Client\Model\TrackingStatus|null $tracking_status tracking_status
     *
     * @return self
     */
    public function setTrackingStatus($tracking_status)
    {
        if (is_null($tracking_status)) {
            throw new \InvalidArgumentException('non-nullable tracking_status cannot be null');
        }
        $this->container['tracking_status'] = $tracking_status;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string|null $transaction The <code>object_id</code> of the transaction associated with this tracking object.  This field is visible only to the object owner of the transaction.
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


