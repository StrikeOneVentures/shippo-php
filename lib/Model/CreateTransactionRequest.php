<?php
/**
 * CreateTransactionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateTransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateTransactionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateTransaction_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'async' => 'bool',
        'label_file_type' => 'string',
        'metadata' => 'string',
        'rate' => 'string',
        'order' => 'string',
        'carrier_account' => 'string',
        'servicelevel_token' => 'string',
        'shipment' => '\OpenAPI\Client\Model\ShipmentCreateRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'async' => null,
        'label_file_type' => null,
        'metadata' => null,
        'rate' => null,
        'order' => null,
        'carrier_account' => null,
        'servicelevel_token' => null,
        'shipment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'async' => false,
        'label_file_type' => false,
        'metadata' => false,
        'rate' => false,
        'order' => false,
        'carrier_account' => false,
        'servicelevel_token' => false,
        'shipment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'async' => 'async',
        'label_file_type' => 'label_file_type',
        'metadata' => 'metadata',
        'rate' => 'rate',
        'order' => 'order',
        'carrier_account' => 'carrier_account',
        'servicelevel_token' => 'servicelevel_token',
        'shipment' => 'shipment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'async' => 'setAsync',
        'label_file_type' => 'setLabelFileType',
        'metadata' => 'setMetadata',
        'rate' => 'setRate',
        'order' => 'setOrder',
        'carrier_account' => 'setCarrierAccount',
        'servicelevel_token' => 'setServicelevelToken',
        'shipment' => 'setShipment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'async' => 'getAsync',
        'label_file_type' => 'getLabelFileType',
        'metadata' => 'getMetadata',
        'rate' => 'getRate',
        'order' => 'getOrder',
        'carrier_account' => 'getCarrierAccount',
        'servicelevel_token' => 'getServicelevelToken',
        'shipment' => 'getShipment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LABEL_FILE_TYPE_PNG = 'PNG';
    public const LABEL_FILE_TYPE_PNG_2_3X7_5 = 'PNG_2.3x7.5';
    public const LABEL_FILE_TYPE_PDF = 'PDF';
    public const LABEL_FILE_TYPE_PDF_2_3X7_5 = 'PDF_2.3x7.5';
    public const LABEL_FILE_TYPE_PDF_4X6 = 'PDF_4x6';
    public const LABEL_FILE_TYPE_PDF_4X8 = 'PDF_4x8';
    public const LABEL_FILE_TYPE_PDF_A4 = 'PDF_A4';
    public const LABEL_FILE_TYPE_PDF_A6 = 'PDF_A6';
    public const LABEL_FILE_TYPE_ZPLII = 'ZPLII';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelFileTypeAllowableValues()
    {
        return [
            self::LABEL_FILE_TYPE_PNG,
            self::LABEL_FILE_TYPE_PNG_2_3X7_5,
            self::LABEL_FILE_TYPE_PDF,
            self::LABEL_FILE_TYPE_PDF_2_3X7_5,
            self::LABEL_FILE_TYPE_PDF_4X6,
            self::LABEL_FILE_TYPE_PDF_4X8,
            self::LABEL_FILE_TYPE_PDF_A4,
            self::LABEL_FILE_TYPE_PDF_A6,
            self::LABEL_FILE_TYPE_ZPLII,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('async', $data ?? [], false);
        $this->setIfExists('label_file_type', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('carrier_account', $data ?? [], null);
        $this->setIfExists('servicelevel_token', $data ?? [], null);
        $this->setIfExists('shipment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLabelFileTypeAllowableValues();
        if (!is_null($this->container['label_file_type']) && !in_array($this->container['label_file_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label_file_type', must be one of '%s'",
                $this->container['label_file_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['rate'] === null) {
            $invalidProperties[] = "'rate' can't be null";
        }
        if ($this->container['carrier_account'] === null) {
            $invalidProperties[] = "'carrier_account' can't be null";
        }
        if ($this->container['servicelevel_token'] === null) {
            $invalidProperties[] = "'servicelevel_token' can't be null";
        }
        if ($this->container['shipment'] === null) {
            $invalidProperties[] = "'shipment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets async
     *
     * @return bool|null
     */
    public function getAsync()
    {
        return $this->container['async'];
    }

    /**
     * Sets async
     *
     * @param bool|null $async async
     *
     * @return self
     */
    public function setAsync($async)
    {
        if (is_null($async)) {
            throw new \InvalidArgumentException('non-nullable async cannot be null');
        }
        $this->container['async'] = $async;

        return $this;
    }

    /**
     * Gets label_file_type
     *
     * @return string|null
     */
    public function getLabelFileType()
    {
        return $this->container['label_file_type'];
    }

    /**
     * Sets label_file_type
     *
     * @param string|null $label_file_type label_file_type
     *
     * @return self
     */
    public function setLabelFileType($label_file_type)
    {
        if (is_null($label_file_type)) {
            throw new \InvalidArgumentException('non-nullable label_file_type cannot be null');
        }
        $allowedValues = $this->getLabelFileTypeAllowableValues();
        if (!in_array($label_file_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label_file_type', must be one of '%s'",
                    $label_file_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label_file_type'] = $label_file_type;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string $rate rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets carrier_account
     *
     * @return string
     */
    public function getCarrierAccount()
    {
        return $this->container['carrier_account'];
    }

    /**
     * Sets carrier_account
     *
     * @param string $carrier_account carrier_account
     *
     * @return self
     */
    public function setCarrierAccount($carrier_account)
    {
        if (is_null($carrier_account)) {
            throw new \InvalidArgumentException('non-nullable carrier_account cannot be null');
        }
        $this->container['carrier_account'] = $carrier_account;

        return $this;
    }

    /**
     * Gets servicelevel_token
     *
     * @return string
     */
    public function getServicelevelToken()
    {
        return $this->container['servicelevel_token'];
    }

    /**
     * Sets servicelevel_token
     *
     * @param string $servicelevel_token servicelevel_token
     *
     * @return self
     */
    public function setServicelevelToken($servicelevel_token)
    {
        if (is_null($servicelevel_token)) {
            throw new \InvalidArgumentException('non-nullable servicelevel_token cannot be null');
        }
        $this->container['servicelevel_token'] = $servicelevel_token;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \OpenAPI\Client\Model\ShipmentCreateRequest
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \OpenAPI\Client\Model\ShipmentCreateRequest $shipment shipment
     *
     * @return self
     */
    public function setShipment($shipment)
    {
        if (is_null($shipment)) {
            throw new \InvalidArgumentException('non-nullable shipment cannot be null');
        }
        $this->container['shipment'] = $shipment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


