<?php
/**
 * Invoice
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Invoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'object_id' => 'string',
        'object_created' => '\DateTime',
        'object_updated' => '\DateTime',
        'shippo_account' => 'string',
        'invoice_number' => 'string',
        'status' => '\OpenAPI\Client\Model\InvoiceStatusEnum',
        'invoice_closed' => '\DateTime',
        'invoice_paid_date' => '\DateTime',
        'total_invoiced' => '\OpenAPI\Client\Model\AmountAndCurrencyInvoiced',
        'total_charged' => '\OpenAPI\Client\Model\AmountAndCurrencyCharged'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'object_id' => null,
        'object_created' => 'date-time',
        'object_updated' => 'date-time',
        'shippo_account' => null,
        'invoice_number' => null,
        'status' => null,
        'invoice_closed' => 'date-time',
        'invoice_paid_date' => 'date-time',
        'total_invoiced' => null,
        'total_charged' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'object_id' => false,
        'object_created' => false,
        'object_updated' => false,
        'shippo_account' => false,
        'invoice_number' => false,
        'status' => false,
        'invoice_closed' => false,
        'invoice_paid_date' => false,
        'total_invoiced' => false,
        'total_charged' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object_id' => 'object_id',
        'object_created' => 'object_created',
        'object_updated' => 'object_updated',
        'shippo_account' => 'shippo_account',
        'invoice_number' => 'invoice_number',
        'status' => 'status',
        'invoice_closed' => 'invoice_closed',
        'invoice_paid_date' => 'invoice_paid_date',
        'total_invoiced' => 'total_invoiced',
        'total_charged' => 'total_charged'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object_id' => 'setObjectId',
        'object_created' => 'setObjectCreated',
        'object_updated' => 'setObjectUpdated',
        'shippo_account' => 'setShippoAccount',
        'invoice_number' => 'setInvoiceNumber',
        'status' => 'setStatus',
        'invoice_closed' => 'setInvoiceClosed',
        'invoice_paid_date' => 'setInvoicePaidDate',
        'total_invoiced' => 'setTotalInvoiced',
        'total_charged' => 'setTotalCharged'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object_id' => 'getObjectId',
        'object_created' => 'getObjectCreated',
        'object_updated' => 'getObjectUpdated',
        'shippo_account' => 'getShippoAccount',
        'invoice_number' => 'getInvoiceNumber',
        'status' => 'getStatus',
        'invoice_closed' => 'getInvoiceClosed',
        'invoice_paid_date' => 'getInvoicePaidDate',
        'total_invoiced' => 'getTotalInvoiced',
        'total_charged' => 'getTotalCharged'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('object_id', $data ?? [], null);
        $this->setIfExists('object_created', $data ?? [], null);
        $this->setIfExists('object_updated', $data ?? [], null);
        $this->setIfExists('shippo_account', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('invoice_closed', $data ?? [], null);
        $this->setIfExists('invoice_paid_date', $data ?? [], null);
        $this->setIfExists('total_invoiced', $data ?? [], null);
        $this->setIfExists('total_charged', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object_id
     *
     * @return string|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string|null $object_id Unique identifier of the given Invoice object
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets object_created
     *
     * @return \DateTime|null
     */
    public function getObjectCreated()
    {
        return $this->container['object_created'];
    }

    /**
     * Sets object_created
     *
     * @param \DateTime|null $object_created Date and time of Invoice creation.
     *
     * @return self
     */
    public function setObjectCreated($object_created)
    {
        if (is_null($object_created)) {
            throw new \InvalidArgumentException('non-nullable object_created cannot be null');
        }
        $this->container['object_created'] = $object_created;

        return $this;
    }

    /**
     * Gets object_updated
     *
     * @return \DateTime|null
     */
    public function getObjectUpdated()
    {
        return $this->container['object_updated'];
    }

    /**
     * Sets object_updated
     *
     * @param \DateTime|null $object_updated Date and time of last Invoice update.
     *
     * @return self
     */
    public function setObjectUpdated($object_updated)
    {
        if (is_null($object_updated)) {
            throw new \InvalidArgumentException('non-nullable object_updated cannot be null');
        }
        $this->container['object_updated'] = $object_updated;

        return $this;
    }

    /**
     * Gets shippo_account
     *
     * @return string|null
     */
    public function getShippoAccount()
    {
        return $this->container['shippo_account'];
    }

    /**
     * Sets shippo_account
     *
     * @param string|null $shippo_account Unique identifier of the user who the Invoice has been issued to.
     *
     * @return self
     */
    public function setShippoAccount($shippo_account)
    {
        if (is_null($shippo_account)) {
            throw new \InvalidArgumentException('non-nullable shippo_account cannot be null');
        }
        $this->container['shippo_account'] = $shippo_account;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Human readable unique identifier of the given Invoice object that is displayed in the web app.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\InvoiceStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\InvoiceStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets invoice_closed
     *
     * @return \DateTime|null
     */
    public function getInvoiceClosed()
    {
        return $this->container['invoice_closed'];
    }

    /**
     * Sets invoice_closed
     *
     * @param \DateTime|null $invoice_closed Date and time of when the Invoice was posted and no new Invoice Items were added. Field will be null when invoice is still in the draft status.
     *
     * @return self
     */
    public function setInvoiceClosed($invoice_closed)
    {
        if (is_null($invoice_closed)) {
            throw new \InvalidArgumentException('non-nullable invoice_closed cannot be null');
        }
        $this->container['invoice_closed'] = $invoice_closed;

        return $this;
    }

    /**
     * Gets invoice_paid_date
     *
     * @return \DateTime|null
     */
    public function getInvoicePaidDate()
    {
        return $this->container['invoice_paid_date'];
    }

    /**
     * Sets invoice_paid_date
     *
     * @param \DateTime|null $invoice_paid_date Date and time of when the Invoice was successfully paid. Field will be null when invoice is not in the paid status.
     *
     * @return self
     */
    public function setInvoicePaidDate($invoice_paid_date)
    {
        if (is_null($invoice_paid_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_paid_date cannot be null');
        }
        $this->container['invoice_paid_date'] = $invoice_paid_date;

        return $this;
    }

    /**
     * Gets total_invoiced
     *
     * @return \OpenAPI\Client\Model\AmountAndCurrencyInvoiced|null
     */
    public function getTotalInvoiced()
    {
        return $this->container['total_invoiced'];
    }

    /**
     * Sets total_invoiced
     *
     * @param \OpenAPI\Client\Model\AmountAndCurrencyInvoiced|null $total_invoiced total_invoiced
     *
     * @return self
     */
    public function setTotalInvoiced($total_invoiced)
    {
        if (is_null($total_invoiced)) {
            throw new \InvalidArgumentException('non-nullable total_invoiced cannot be null');
        }
        $this->container['total_invoiced'] = $total_invoiced;

        return $this;
    }

    /**
     * Gets total_charged
     *
     * @return \OpenAPI\Client\Model\AmountAndCurrencyCharged|null
     */
    public function getTotalCharged()
    {
        return $this->container['total_charged'];
    }

    /**
     * Sets total_charged
     *
     * @param \OpenAPI\Client\Model\AmountAndCurrencyCharged|null $total_charged total_charged
     *
     * @return self
     */
    public function setTotalCharged($total_charged)
    {
        if (is_null($total_charged)) {
            throw new \InvalidArgumentException('non-nullable total_charged cannot be null');
        }
        $this->container['total_charged'] = $total_charged;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


