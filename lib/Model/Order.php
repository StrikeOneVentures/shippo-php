<?php
/**
 * Order
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency' => 'string',
        'notes' => 'string',
        'order_number' => 'string',
        'order_status' => '\OpenAPI\Client\Model\OrderStatusEnum',
        'placed_at' => 'string',
        'shipping_cost' => 'string',
        'shipping_cost_currency' => 'string',
        'shipping_method' => 'string',
        'subtotal_price' => 'string',
        'total_price' => 'string',
        'total_tax' => 'string',
        'weight' => 'string',
        'weight_unit' => '\OpenAPI\Client\Model\WeightUnitEnum',
        'from_address' => '\OpenAPI\Client\Model\AddressFrom',
        'to_address' => '\OpenAPI\Client\Model\AddressTo',
        'line_items' => '\OpenAPI\Client\Model\LineItem[]',
        'object_id' => 'string',
        'object_owner' => 'string',
        'shop_app' => '\OpenAPI\Client\Model\OrderShopAppEnum',
        'transactions' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency' => null,
        'notes' => null,
        'order_number' => null,
        'order_status' => null,
        'placed_at' => null,
        'shipping_cost' => null,
        'shipping_cost_currency' => null,
        'shipping_method' => null,
        'subtotal_price' => null,
        'total_price' => null,
        'total_tax' => null,
        'weight' => null,
        'weight_unit' => null,
        'from_address' => null,
        'to_address' => null,
        'line_items' => null,
        'object_id' => null,
        'object_owner' => null,
        'shop_app' => null,
        'transactions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currency' => false,
        'notes' => false,
        'order_number' => false,
        'order_status' => false,
        'placed_at' => false,
        'shipping_cost' => false,
        'shipping_cost_currency' => false,
        'shipping_method' => false,
        'subtotal_price' => false,
        'total_price' => false,
        'total_tax' => false,
        'weight' => false,
        'weight_unit' => false,
        'from_address' => false,
        'to_address' => false,
        'line_items' => false,
        'object_id' => false,
        'object_owner' => false,
        'shop_app' => false,
        'transactions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'notes' => 'notes',
        'order_number' => 'order_number',
        'order_status' => 'order_status',
        'placed_at' => 'placed_at',
        'shipping_cost' => 'shipping_cost',
        'shipping_cost_currency' => 'shipping_cost_currency',
        'shipping_method' => 'shipping_method',
        'subtotal_price' => 'subtotal_price',
        'total_price' => 'total_price',
        'total_tax' => 'total_tax',
        'weight' => 'weight',
        'weight_unit' => 'weight_unit',
        'from_address' => 'from_address',
        'to_address' => 'to_address',
        'line_items' => 'line_items',
        'object_id' => 'object_id',
        'object_owner' => 'object_owner',
        'shop_app' => 'shop_app',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'notes' => 'setNotes',
        'order_number' => 'setOrderNumber',
        'order_status' => 'setOrderStatus',
        'placed_at' => 'setPlacedAt',
        'shipping_cost' => 'setShippingCost',
        'shipping_cost_currency' => 'setShippingCostCurrency',
        'shipping_method' => 'setShippingMethod',
        'subtotal_price' => 'setSubtotalPrice',
        'total_price' => 'setTotalPrice',
        'total_tax' => 'setTotalTax',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'from_address' => 'setFromAddress',
        'to_address' => 'setToAddress',
        'line_items' => 'setLineItems',
        'object_id' => 'setObjectId',
        'object_owner' => 'setObjectOwner',
        'shop_app' => 'setShopApp',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'notes' => 'getNotes',
        'order_number' => 'getOrderNumber',
        'order_status' => 'getOrderStatus',
        'placed_at' => 'getPlacedAt',
        'shipping_cost' => 'getShippingCost',
        'shipping_cost_currency' => 'getShippingCostCurrency',
        'shipping_method' => 'getShippingMethod',
        'subtotal_price' => 'getSubtotalPrice',
        'total_price' => 'getTotalPrice',
        'total_tax' => 'getTotalTax',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'from_address' => 'getFromAddress',
        'to_address' => 'getToAddress',
        'line_items' => 'getLineItems',
        'object_id' => 'getObjectId',
        'object_owner' => 'getObjectOwner',
        'shop_app' => 'getShopApp',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('placed_at', $data ?? [], null);
        $this->setIfExists('shipping_cost', $data ?? [], null);
        $this->setIfExists('shipping_cost_currency', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('subtotal_price', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('total_tax', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('from_address', $data ?? [], null);
        $this->setIfExists('to_address', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('object_id', $data ?? [], null);
        $this->setIfExists('object_owner', $data ?? [], null);
        $this->setIfExists('shop_app', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['placed_at'] === null) {
            $invalidProperties[] = "'placed_at' can't be null";
        }
        if ($this->container['to_address'] === null) {
            $invalidProperties[] = "'to_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency **Required if total_price is provided**<br> Currency of the <code>total_price</code> and <code>total_tax</code> amounts.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Custom buyer- or seller-provided notes about the order.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number An alphanumeric identifier for the order used by the seller/buyer. This identifier doesn't need to be unique.
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return \OpenAPI\Client\Model\OrderStatusEnum|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param \OpenAPI\Client\Model\OrderStatusEnum|null $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets placed_at
     *
     * @return string
     */
    public function getPlacedAt()
    {
        return $this->container['placed_at'];
    }

    /**
     * Sets placed_at
     *
     * @param string $placed_at Date and time when the order was placed. This datetime can be different from the datetime of the order object creation on Shippo.
     *
     * @return self
     */
    public function setPlacedAt($placed_at)
    {
        if (is_null($placed_at)) {
            throw new \InvalidArgumentException('non-nullable placed_at cannot be null');
        }
        $this->container['placed_at'] = $placed_at;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return string|null
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param string|null $shipping_cost Amount paid by the buyer for shipping. This amount can be different from the price the seller will actually pay for shipping.
     *
     * @return self
     */
    public function setShippingCost($shipping_cost)
    {
        if (is_null($shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost cannot be null');
        }
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets shipping_cost_currency
     *
     * @return string|null
     */
    public function getShippingCostCurrency()
    {
        return $this->container['shipping_cost_currency'];
    }

    /**
     * Sets shipping_cost_currency
     *
     * @param string|null $shipping_cost_currency **Required if shipping_cost is provided**<br> Currency of the <code>shipping_cost</code> amount.
     *
     * @return self
     */
    public function setShippingCostCurrency($shipping_cost_currency)
    {
        if (is_null($shipping_cost_currency)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost_currency cannot be null');
        }
        $this->container['shipping_cost_currency'] = $shipping_cost_currency;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method Shipping method (carrier + service or other free text description) chosen by the buyer.  This value can be different from the shipping method the seller will actually choose.
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        if (is_null($shipping_method)) {
            throw new \InvalidArgumentException('non-nullable shipping_method cannot be null');
        }
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets subtotal_price
     *
     * @return string|null
     */
    public function getSubtotalPrice()
    {
        return $this->container['subtotal_price'];
    }

    /**
     * Sets subtotal_price
     *
     * @param string|null $subtotal_price subtotal_price
     *
     * @return self
     */
    public function setSubtotalPrice($subtotal_price)
    {
        if (is_null($subtotal_price)) {
            throw new \InvalidArgumentException('non-nullable subtotal_price cannot be null');
        }
        $this->container['subtotal_price'] = $subtotal_price;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return string|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param string|null $total_price Total amount paid by the buyer for this order.
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return string|null
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param string|null $total_tax Total tax amount paid by the buyer for this order.
     *
     * @return self
     */
    public function setTotalTax($total_tax)
    {
        if (is_null($total_tax)) {
            throw new \InvalidArgumentException('non-nullable total_tax cannot be null');
        }
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string|null $weight Total weight of the order.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return \OpenAPI\Client\Model\WeightUnitEnum|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param \OpenAPI\Client\Model\WeightUnitEnum|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets from_address
     *
     * @return \OpenAPI\Client\Model\AddressFrom|null
     */
    public function getFromAddress()
    {
        return $this->container['from_address'];
    }

    /**
     * Sets from_address
     *
     * @param \OpenAPI\Client\Model\AddressFrom|null $from_address from_address
     *
     * @return self
     */
    public function setFromAddress($from_address)
    {
        if (is_null($from_address)) {
            throw new \InvalidArgumentException('non-nullable from_address cannot be null');
        }
        $this->container['from_address'] = $from_address;

        return $this;
    }

    /**
     * Gets to_address
     *
     * @return \OpenAPI\Client\Model\AddressTo
     */
    public function getToAddress()
    {
        return $this->container['to_address'];
    }

    /**
     * Sets to_address
     *
     * @param \OpenAPI\Client\Model\AddressTo $to_address to_address
     *
     * @return self
     */
    public function setToAddress($to_address)
    {
        if (is_null($to_address)) {
            throw new \InvalidArgumentException('non-nullable to_address cannot be null');
        }
        $this->container['to_address'] = $to_address;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \OpenAPI\Client\Model\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \OpenAPI\Client\Model\LineItem[]|null $line_items Array of <a href=\"#section/Line-Item\">line item</a> objects representing the items in this order.  All objects will be returned expanded by default.
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string|null $object_id Unique identifier of the order object.
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets object_owner
     *
     * @return string|null
     */
    public function getObjectOwner()
    {
        return $this->container['object_owner'];
    }

    /**
     * Sets object_owner
     *
     * @param string|null $object_owner Username of the user who created the object.
     *
     * @return self
     */
    public function setObjectOwner($object_owner)
    {
        if (is_null($object_owner)) {
            throw new \InvalidArgumentException('non-nullable object_owner cannot be null');
        }
        $this->container['object_owner'] = $object_owner;

        return $this;
    }

    /**
     * Gets shop_app
     *
     * @return \OpenAPI\Client\Model\OrderShopAppEnum|null
     */
    public function getShopApp()
    {
        return $this->container['shop_app'];
    }

    /**
     * Sets shop_app
     *
     * @param \OpenAPI\Client\Model\OrderShopAppEnum|null $shop_app shop_app
     *
     * @return self
     */
    public function setShopApp($shop_app)
    {
        if (is_null($shop_app)) {
            throw new \InvalidArgumentException('non-nullable shop_app cannot be null');
        }
        $this->container['shop_app'] = $shop_app;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return object[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param object[]|null $transactions Array of <a href=\"#tag/Transactions\">transaction</a> objects representing all shipping labels purchased for this order. All objects are returned expanded with a limited number of fields by default.
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


