<?php
/**
 * Location
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Location Class Doc Comment
 *
 * @category Class
 * @description Location where the parcel(s) will be picked up.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Location implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => '\OpenAPI\Client\Model\AddressPickupCompleteCreateRequest',
        'building_location_type' => 'string',
        'building_type' => 'string',
        'instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'building_location_type' => null,
        'building_type' => null,
        'instructions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'building_location_type' => false,
        'building_type' => false,
        'instructions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'building_location_type' => 'building_location_type',
        'building_type' => 'building_type',
        'instructions' => 'instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'building_location_type' => 'setBuildingLocationType',
        'building_type' => 'setBuildingType',
        'instructions' => 'setInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'building_location_type' => 'getBuildingLocationType',
        'building_type' => 'getBuildingType',
        'instructions' => 'getInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BUILDING_LOCATION_TYPE_BACK_DOOR = 'Back Door';
    public const BUILDING_LOCATION_TYPE_RING_BELL = 'Ring Bell';
    public const BUILDING_LOCATION_TYPE_SECURITY_DECK = 'Security Deck';
    public const BUILDING_LOCATION_TYPE_SHIPPING_DOCK = 'Shipping Dock';
    public const BUILDING_LOCATION_TYPE_FRONT_DOOR = 'Front Door';
    public const BUILDING_LOCATION_TYPE_KNOCK_ON_DOOR = 'Knock on Door';
    public const BUILDING_LOCATION_TYPE_IN_AT_MAILBOX = 'In/At Mailbox';
    public const BUILDING_LOCATION_TYPE_MAIL_ROOM = 'Mail Room';
    public const BUILDING_LOCATION_TYPE_OFFICE = 'Office';
    public const BUILDING_LOCATION_TYPE_OTHER = 'Other';
    public const BUILDING_LOCATION_TYPE_RECEPTION = 'Reception';
    public const BUILDING_LOCATION_TYPE_SIDE_DOOR = 'Side Door';
    public const BUILDING_TYPE_APARTMENT = 'apartment';
    public const BUILDING_TYPE_BUILDING = 'building';
    public const BUILDING_TYPE_DEPARTMENT = 'department';
    public const BUILDING_TYPE_FLOOR = 'floor';
    public const BUILDING_TYPE_ROOM = 'room';
    public const BUILDING_TYPE_SUITE = 'suite';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuildingLocationTypeAllowableValues()
    {
        return [
            self::BUILDING_LOCATION_TYPE_BACK_DOOR,
            self::BUILDING_LOCATION_TYPE_RING_BELL,
            self::BUILDING_LOCATION_TYPE_SECURITY_DECK,
            self::BUILDING_LOCATION_TYPE_SHIPPING_DOCK,
            self::BUILDING_LOCATION_TYPE_FRONT_DOOR,
            self::BUILDING_LOCATION_TYPE_KNOCK_ON_DOOR,
            self::BUILDING_LOCATION_TYPE_IN_AT_MAILBOX,
            self::BUILDING_LOCATION_TYPE_MAIL_ROOM,
            self::BUILDING_LOCATION_TYPE_OFFICE,
            self::BUILDING_LOCATION_TYPE_OTHER,
            self::BUILDING_LOCATION_TYPE_RECEPTION,
            self::BUILDING_LOCATION_TYPE_SIDE_DOOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuildingTypeAllowableValues()
    {
        return [
            self::BUILDING_TYPE_APARTMENT,
            self::BUILDING_TYPE_BUILDING,
            self::BUILDING_TYPE_DEPARTMENT,
            self::BUILDING_TYPE_FLOOR,
            self::BUILDING_TYPE_ROOM,
            self::BUILDING_TYPE_SUITE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('building_location_type', $data ?? [], null);
        $this->setIfExists('building_type', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['building_location_type'] === null) {
            $invalidProperties[] = "'building_location_type' can't be null";
        }
        $allowedValues = $this->getBuildingLocationTypeAllowableValues();
        if (!is_null($this->container['building_location_type']) && !in_array($this->container['building_location_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'building_location_type', must be one of '%s'",
                $this->container['building_location_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBuildingTypeAllowableValues();
        if (!is_null($this->container['building_type']) && !in_array($this->container['building_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'building_type', must be one of '%s'",
                $this->container['building_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\AddressPickupCompleteCreateRequest
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\AddressPickupCompleteCreateRequest $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets building_location_type
     *
     * @return string
     */
    public function getBuildingLocationType()
    {
        return $this->container['building_location_type'];
    }

    /**
     * Sets building_location_type
     *
     * @param string $building_location_type Where your parcels will be available for pickup. \"Security Deck\" and \"Shipping Dock\" are only  supported for DHL Express.
     *
     * @return self
     */
    public function setBuildingLocationType($building_location_type)
    {
        if (is_null($building_location_type)) {
            throw new \InvalidArgumentException('non-nullable building_location_type cannot be null');
        }
        $allowedValues = $this->getBuildingLocationTypeAllowableValues();
        if (!in_array($building_location_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'building_location_type', must be one of '%s'",
                    $building_location_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['building_location_type'] = $building_location_type;

        return $this;
    }

    /**
     * Gets building_type
     *
     * @return string|null
     */
    public function getBuildingType()
    {
        return $this->container['building_type'];
    }

    /**
     * Sets building_type
     *
     * @param string|null $building_type The type of building where the pickup is located.
     *
     * @return self
     */
    public function setBuildingType($building_type)
    {
        if (is_null($building_type)) {
            throw new \InvalidArgumentException('non-nullable building_type cannot be null');
        }
        $allowedValues = $this->getBuildingTypeAllowableValues();
        if (!in_array($building_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'building_type', must be one of '%s'",
                    $building_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['building_type'] = $building_type;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions Pickup instructions for the courier. This is a mandatory field if the building_location_type is \"Other\".
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


