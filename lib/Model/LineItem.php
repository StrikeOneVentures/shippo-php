<?php
/**
 * LineItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LineItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LineItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency' => 'string',
        'manufacture_country' => 'string',
        'max_delivery_time' => '\DateTime',
        'max_ship_time' => '\DateTime',
        'quantity' => 'int',
        'sku' => 'string',
        'title' => 'string',
        'total_price' => 'string',
        'variant_title' => 'string',
        'weight' => 'string',
        'weight_unit' => '\OpenAPI\Client\Model\WeightUnitEnum',
        'object_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency' => null,
        'manufacture_country' => null,
        'max_delivery_time' => 'date-time',
        'max_ship_time' => 'date-time',
        'quantity' => 'int64',
        'sku' => null,
        'title' => null,
        'total_price' => null,
        'variant_title' => null,
        'weight' => null,
        'weight_unit' => null,
        'object_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currency' => false,
        'manufacture_country' => false,
        'max_delivery_time' => false,
        'max_ship_time' => false,
        'quantity' => false,
        'sku' => false,
        'title' => false,
        'total_price' => false,
        'variant_title' => false,
        'weight' => false,
        'weight_unit' => false,
        'object_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'manufacture_country' => 'manufacture_country',
        'max_delivery_time' => 'max_delivery_time',
        'max_ship_time' => 'max_ship_time',
        'quantity' => 'quantity',
        'sku' => 'sku',
        'title' => 'title',
        'total_price' => 'total_price',
        'variant_title' => 'variant_title',
        'weight' => 'weight',
        'weight_unit' => 'weight_unit',
        'object_id' => 'object_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'manufacture_country' => 'setManufactureCountry',
        'max_delivery_time' => 'setMaxDeliveryTime',
        'max_ship_time' => 'setMaxShipTime',
        'quantity' => 'setQuantity',
        'sku' => 'setSku',
        'title' => 'setTitle',
        'total_price' => 'setTotalPrice',
        'variant_title' => 'setVariantTitle',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'object_id' => 'setObjectId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'manufacture_country' => 'getManufactureCountry',
        'max_delivery_time' => 'getMaxDeliveryTime',
        'max_ship_time' => 'getMaxShipTime',
        'quantity' => 'getQuantity',
        'sku' => 'getSku',
        'title' => 'getTitle',
        'total_price' => 'getTotalPrice',
        'variant_title' => 'getVariantTitle',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'object_id' => 'getObjectId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('manufacture_country', $data ?? [], null);
        $this->setIfExists('max_delivery_time', $data ?? [], null);
        $this->setIfExists('max_ship_time', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('variant_title', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('object_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of the <code>total_price</code> amount.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets manufacture_country
     *
     * @return string|null
     */
    public function getManufactureCountry()
    {
        return $this->container['manufacture_country'];
    }

    /**
     * Sets manufacture_country
     *
     * @param string|null $manufacture_country Country the item was manufactured in. In the Shippo dashboard, this value will be used ot pre-fill the customs declaration when creating a label for this order.
     *
     * @return self
     */
    public function setManufactureCountry($manufacture_country)
    {
        if (is_null($manufacture_country)) {
            throw new \InvalidArgumentException('non-nullable manufacture_country cannot be null');
        }
        $this->container['manufacture_country'] = $manufacture_country;

        return $this;
    }

    /**
     * Gets max_delivery_time
     *
     * @return \DateTime|null
     */
    public function getMaxDeliveryTime()
    {
        return $this->container['max_delivery_time'];
    }

    /**
     * Sets max_delivery_time
     *
     * @param \DateTime|null $max_delivery_time The date and time this item needs to be delivered by, i.e. by when the carrier delivers it to the buyer.  This value is used by some platforms such as eBay to measure a seller's shipping time and performance.  It will be displayed in the Shippo dashboard.
     *
     * @return self
     */
    public function setMaxDeliveryTime($max_delivery_time)
    {
        if (is_null($max_delivery_time)) {
            throw new \InvalidArgumentException('non-nullable max_delivery_time cannot be null');
        }
        $this->container['max_delivery_time'] = $max_delivery_time;

        return $this;
    }

    /**
     * Gets max_ship_time
     *
     * @return \DateTime|null
     */
    public function getMaxShipTime()
    {
        return $this->container['max_ship_time'];
    }

    /**
     * Sets max_ship_time
     *
     * @param \DateTime|null $max_ship_time The date and time this item needs to be fulfilled by, i.e. by when the shipping label needs to be  created and handed over to the carrier. This value is used by some platforms such as eBay to measure  a seller's handling time and performance. It will be displayed in the Shippo dashboard.
     *
     * @return self
     */
    public function setMaxShipTime($max_ship_time)
    {
        if (is_null($max_ship_time)) {
            throw new \InvalidArgumentException('non-nullable max_ship_time cannot be null');
        }
        $this->container['max_ship_time'] = $max_ship_time;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity of this item in this order.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku The stock keeping unit value of this item.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the line item.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return string|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param string|null $total_price Total price paid by the buyer for this item (or these items, if quantity > 1).
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets variant_title
     *
     * @return string|null
     */
    public function getVariantTitle()
    {
        return $this->container['variant_title'];
    }

    /**
     * Sets variant_title
     *
     * @param string|null $variant_title A variant is a specific variation of an item (e.g. `size M` or `color blue`).  Variants might be exposed as a separate resource in the future too.  Currently the variant title is a free text field describing the variant.
     *
     * @return self
     */
    public function setVariantTitle($variant_title)
    {
        if (is_null($variant_title)) {
            throw new \InvalidArgumentException('non-nullable variant_title cannot be null');
        }
        $this->container['variant_title'] = $variant_title;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string|null $weight Total weight of this/these item(s). Instead of specifying the weight of all items,  you can also set the <code>total_weight</code> value of the order object.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return \OpenAPI\Client\Model\WeightUnitEnum|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param \OpenAPI\Client\Model\WeightUnitEnum|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string|null $object_id Unique identifier of the line item object.
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


