<?php
/**
 * ConnectExistingOwnAccountRequestParameters
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shippo external API.
 *
 * Use this API to integrate with the Shippo service
 *
 * The version of the OpenAPI document: 2018-02-08
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConnectExistingOwnAccountRequestParameters Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConnectExistingOwnAccountRequestParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConnectExistingOwnAccountRequest_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'phone_number' => 'string',
        'from_address_st' => 'string',
        'from_address_city' => 'string',
        'from_address_state' => 'string',
        'from_address_zip' => 'string',
        'from_address_country_iso2' => 'string',
        'account_number' => 'string',
        'aia_country_iso2' => 'string',
        'billing_address_city' => 'string',
        'billing_address_country_iso2' => 'string',
        'billing_address_state' => 'string',
        'billing_address_street1' => 'string',
        'billing_address_street2' => 'string',
        'billing_address_zip' => 'string',
        'collec_country_iso2' => 'string',
        'collec_zip' => 'string',
        'company' => 'string',
        'currency_code' => 'string',
        'email' => 'string',
        'full_name' => 'string',
        'has_invoice' => 'bool',
        'invoice_controlid' => 'string',
        'invoice_date' => 'string',
        'invoice_number' => 'string',
        'invoice_value' => 'string',
        'phone' => 'string',
        'title' => 'string',
        'ups_agreements' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'last_name' => null,
        'phone_number' => null,
        'from_address_st' => null,
        'from_address_city' => null,
        'from_address_state' => null,
        'from_address_zip' => null,
        'from_address_country_iso2' => 'iso-3166-1-alpha-2',
        'account_number' => null,
        'aia_country_iso2' => null,
        'billing_address_city' => null,
        'billing_address_country_iso2' => null,
        'billing_address_state' => null,
        'billing_address_street1' => null,
        'billing_address_street2' => null,
        'billing_address_zip' => null,
        'collec_country_iso2' => null,
        'collec_zip' => null,
        'company' => null,
        'currency_code' => null,
        'email' => null,
        'full_name' => null,
        'has_invoice' => null,
        'invoice_controlid' => null,
        'invoice_date' => null,
        'invoice_number' => null,
        'invoice_value' => null,
        'phone' => null,
        'title' => null,
        'ups_agreements' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => false,
        'last_name' => false,
        'phone_number' => false,
        'from_address_st' => false,
        'from_address_city' => false,
        'from_address_state' => false,
        'from_address_zip' => false,
        'from_address_country_iso2' => false,
        'account_number' => false,
        'aia_country_iso2' => false,
        'billing_address_city' => false,
        'billing_address_country_iso2' => false,
        'billing_address_state' => false,
        'billing_address_street1' => false,
        'billing_address_street2' => false,
        'billing_address_zip' => false,
        'collec_country_iso2' => false,
        'collec_zip' => false,
        'company' => false,
        'currency_code' => false,
        'email' => false,
        'full_name' => false,
        'has_invoice' => false,
        'invoice_controlid' => false,
        'invoice_date' => false,
        'invoice_number' => false,
        'invoice_value' => false,
        'phone' => false,
        'title' => false,
        'ups_agreements' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'phone_number' => 'phone_number',
        'from_address_st' => 'from_address_st',
        'from_address_city' => 'from_address_city',
        'from_address_state' => 'from_address_state',
        'from_address_zip' => 'from_address_zip',
        'from_address_country_iso2' => 'from_address_country_iso2',
        'account_number' => 'account_number',
        'aia_country_iso2' => 'aia_country_iso2',
        'billing_address_city' => 'billing_address_city',
        'billing_address_country_iso2' => 'billing_address_country_iso2',
        'billing_address_state' => 'billing_address_state',
        'billing_address_street1' => 'billing_address_street1',
        'billing_address_street2' => 'billing_address_street2',
        'billing_address_zip' => 'billing_address_zip',
        'collec_country_iso2' => 'collec_country_iso2',
        'collec_zip' => 'collec_zip',
        'company' => 'company',
        'currency_code' => 'currency_code',
        'email' => 'email',
        'full_name' => 'full_name',
        'has_invoice' => 'has_invoice',
        'invoice_controlid' => 'invoice_controlid',
        'invoice_date' => 'invoice_date',
        'invoice_number' => 'invoice_number',
        'invoice_value' => 'invoice_value',
        'phone' => 'phone',
        'title' => 'title',
        'ups_agreements' => 'ups_agreements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'phone_number' => 'setPhoneNumber',
        'from_address_st' => 'setFromAddressSt',
        'from_address_city' => 'setFromAddressCity',
        'from_address_state' => 'setFromAddressState',
        'from_address_zip' => 'setFromAddressZip',
        'from_address_country_iso2' => 'setFromAddressCountryIso2',
        'account_number' => 'setAccountNumber',
        'aia_country_iso2' => 'setAiaCountryIso2',
        'billing_address_city' => 'setBillingAddressCity',
        'billing_address_country_iso2' => 'setBillingAddressCountryIso2',
        'billing_address_state' => 'setBillingAddressState',
        'billing_address_street1' => 'setBillingAddressStreet1',
        'billing_address_street2' => 'setBillingAddressStreet2',
        'billing_address_zip' => 'setBillingAddressZip',
        'collec_country_iso2' => 'setCollecCountryIso2',
        'collec_zip' => 'setCollecZip',
        'company' => 'setCompany',
        'currency_code' => 'setCurrencyCode',
        'email' => 'setEmail',
        'full_name' => 'setFullName',
        'has_invoice' => 'setHasInvoice',
        'invoice_controlid' => 'setInvoiceControlid',
        'invoice_date' => 'setInvoiceDate',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_value' => 'setInvoiceValue',
        'phone' => 'setPhone',
        'title' => 'setTitle',
        'ups_agreements' => 'setUpsAgreements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'phone_number' => 'getPhoneNumber',
        'from_address_st' => 'getFromAddressSt',
        'from_address_city' => 'getFromAddressCity',
        'from_address_state' => 'getFromAddressState',
        'from_address_zip' => 'getFromAddressZip',
        'from_address_country_iso2' => 'getFromAddressCountryIso2',
        'account_number' => 'getAccountNumber',
        'aia_country_iso2' => 'getAiaCountryIso2',
        'billing_address_city' => 'getBillingAddressCity',
        'billing_address_country_iso2' => 'getBillingAddressCountryIso2',
        'billing_address_state' => 'getBillingAddressState',
        'billing_address_street1' => 'getBillingAddressStreet1',
        'billing_address_street2' => 'getBillingAddressStreet2',
        'billing_address_zip' => 'getBillingAddressZip',
        'collec_country_iso2' => 'getCollecCountryIso2',
        'collec_zip' => 'getCollecZip',
        'company' => 'getCompany',
        'currency_code' => 'getCurrencyCode',
        'email' => 'getEmail',
        'full_name' => 'getFullName',
        'has_invoice' => 'getHasInvoice',
        'invoice_controlid' => 'getInvoiceControlid',
        'invoice_date' => 'getInvoiceDate',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_value' => 'getInvoiceValue',
        'phone' => 'getPhone',
        'title' => 'getTitle',
        'ups_agreements' => 'getUpsAgreements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('from_address_st', $data ?? [], null);
        $this->setIfExists('from_address_city', $data ?? [], null);
        $this->setIfExists('from_address_state', $data ?? [], null);
        $this->setIfExists('from_address_zip', $data ?? [], null);
        $this->setIfExists('from_address_country_iso2', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('aia_country_iso2', $data ?? [], null);
        $this->setIfExists('billing_address_city', $data ?? [], null);
        $this->setIfExists('billing_address_country_iso2', $data ?? [], null);
        $this->setIfExists('billing_address_state', $data ?? [], null);
        $this->setIfExists('billing_address_street1', $data ?? [], null);
        $this->setIfExists('billing_address_street2', $data ?? [], null);
        $this->setIfExists('billing_address_zip', $data ?? [], null);
        $this->setIfExists('collec_country_iso2', $data ?? [], null);
        $this->setIfExists('collec_zip', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('has_invoice', $data ?? [], null);
        $this->setIfExists('invoice_controlid', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('invoice_value', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('ups_agreements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ($this->container['from_address_st'] === null) {
            $invalidProperties[] = "'from_address_st' can't be null";
        }
        if ($this->container['from_address_city'] === null) {
            $invalidProperties[] = "'from_address_city' can't be null";
        }
        if ($this->container['from_address_state'] === null) {
            $invalidProperties[] = "'from_address_state' can't be null";
        }
        if ($this->container['from_address_zip'] === null) {
            $invalidProperties[] = "'from_address_zip' can't be null";
        }
        if ($this->container['from_address_country_iso2'] === null) {
            $invalidProperties[] = "'from_address_country_iso2' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['billing_address_city'] === null) {
            $invalidProperties[] = "'billing_address_city' can't be null";
        }
        if ($this->container['billing_address_country_iso2'] === null) {
            $invalidProperties[] = "'billing_address_country_iso2' can't be null";
        }
        if ((mb_strlen($this->container['billing_address_country_iso2']) > 2)) {
            $invalidProperties[] = "invalid value for 'billing_address_country_iso2', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['billing_address_country_iso2']) < 2)) {
            $invalidProperties[] = "invalid value for 'billing_address_country_iso2', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['billing_address_state'] === null) {
            $invalidProperties[] = "'billing_address_state' can't be null";
        }
        if ((mb_strlen($this->container['billing_address_state']) > 2)) {
            $invalidProperties[] = "invalid value for 'billing_address_state', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['billing_address_state']) < 2)) {
            $invalidProperties[] = "invalid value for 'billing_address_state', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['billing_address_street1'] === null) {
            $invalidProperties[] = "'billing_address_street1' can't be null";
        }
        if ($this->container['billing_address_zip'] === null) {
            $invalidProperties[] = "'billing_address_zip' can't be null";
        }
        if ((mb_strlen($this->container['billing_address_zip']) > 5)) {
            $invalidProperties[] = "invalid value for 'billing_address_zip', the character length must be smaller than or equal to 5.";
        }

        if ((mb_strlen($this->container['billing_address_zip']) < 5)) {
            $invalidProperties[] = "invalid value for 'billing_address_zip', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['collec_country_iso2'] === null) {
            $invalidProperties[] = "'collec_country_iso2' can't be null";
        }
        if ((mb_strlen($this->container['collec_country_iso2']) > 2)) {
            $invalidProperties[] = "invalid value for 'collec_country_iso2', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['collec_country_iso2']) < 2)) {
            $invalidProperties[] = "invalid value for 'collec_country_iso2', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['collec_zip'] === null) {
            $invalidProperties[] = "'collec_zip' can't be null";
        }
        if ((mb_strlen($this->container['collec_zip']) > 5)) {
            $invalidProperties[] = "invalid value for 'collec_zip', the character length must be smaller than or equal to 5.";
        }

        if ((mb_strlen($this->container['collec_zip']) < 5)) {
            $invalidProperties[] = "invalid value for 'collec_zip', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['full_name'] === null) {
            $invalidProperties[] = "'full_name' can't be null";
        }
        if ($this->container['has_invoice'] === null) {
            $invalidProperties[] = "'has_invoice' can't be null";
        }
        if (!is_null($this->container['invoice_controlid']) && (mb_strlen($this->container['invoice_controlid']) > 4)) {
            $invalidProperties[] = "invalid value for 'invoice_controlid', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['invoice_controlid']) && (mb_strlen($this->container['invoice_controlid']) < 4)) {
            $invalidProperties[] = "invalid value for 'invoice_controlid', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) > 15)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['ups_agreements'] === null) {
            $invalidProperties[] = "'ups_agreements' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the account holder
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the account holder
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number of the account holder
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets from_address_st
     *
     * @return string
     */
    public function getFromAddressSt()
    {
        return $this->container['from_address_st'];
    }

    /**
     * Sets from_address_st
     *
     * @param string $from_address_st Street address of the account holder
     *
     * @return self
     */
    public function setFromAddressSt($from_address_st)
    {
        if (is_null($from_address_st)) {
            throw new \InvalidArgumentException('non-nullable from_address_st cannot be null');
        }
        $this->container['from_address_st'] = $from_address_st;

        return $this;
    }

    /**
     * Gets from_address_city
     *
     * @return string
     */
    public function getFromAddressCity()
    {
        return $this->container['from_address_city'];
    }

    /**
     * Sets from_address_city
     *
     * @param string $from_address_city City of the account holder
     *
     * @return self
     */
    public function setFromAddressCity($from_address_city)
    {
        if (is_null($from_address_city)) {
            throw new \InvalidArgumentException('non-nullable from_address_city cannot be null');
        }
        $this->container['from_address_city'] = $from_address_city;

        return $this;
    }

    /**
     * Gets from_address_state
     *
     * @return string
     */
    public function getFromAddressState()
    {
        return $this->container['from_address_state'];
    }

    /**
     * Sets from_address_state
     *
     * @param string $from_address_state State of the account holder
     *
     * @return self
     */
    public function setFromAddressState($from_address_state)
    {
        if (is_null($from_address_state)) {
            throw new \InvalidArgumentException('non-nullable from_address_state cannot be null');
        }
        $this->container['from_address_state'] = $from_address_state;

        return $this;
    }

    /**
     * Gets from_address_zip
     *
     * @return string
     */
    public function getFromAddressZip()
    {
        return $this->container['from_address_zip'];
    }

    /**
     * Sets from_address_zip
     *
     * @param string $from_address_zip Zip code of the account holder
     *
     * @return self
     */
    public function setFromAddressZip($from_address_zip)
    {
        if (is_null($from_address_zip)) {
            throw new \InvalidArgumentException('non-nullable from_address_zip cannot be null');
        }
        $this->container['from_address_zip'] = $from_address_zip;

        return $this;
    }

    /**
     * Gets from_address_country_iso2
     *
     * @return string
     */
    public function getFromAddressCountryIso2()
    {
        return $this->container['from_address_country_iso2'];
    }

    /**
     * Sets from_address_country_iso2
     *
     * @param string $from_address_country_iso2 Country of the account holder
     *
     * @return self
     */
    public function setFromAddressCountryIso2($from_address_country_iso2)
    {
        if (is_null($from_address_country_iso2)) {
            throw new \InvalidArgumentException('non-nullable from_address_country_iso2 cannot be null');
        }
        $this->container['from_address_country_iso2'] = $from_address_country_iso2;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The UPS account number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets aia_country_iso2
     *
     * @return string|null
     */
    public function getAiaCountryIso2()
    {
        return $this->container['aia_country_iso2'];
    }

    /**
     * Sets aia_country_iso2
     *
     * @param string|null $aia_country_iso2 Only required if has_invoice is true. Country associated with the account that issued the invoice
     *
     * @return self
     */
    public function setAiaCountryIso2($aia_country_iso2)
    {
        if (is_null($aia_country_iso2)) {
            throw new \InvalidArgumentException('non-nullable aia_country_iso2 cannot be null');
        }
        $this->container['aia_country_iso2'] = $aia_country_iso2;

        return $this;
    }

    /**
     * Gets billing_address_city
     *
     * @return string
     */
    public function getBillingAddressCity()
    {
        return $this->container['billing_address_city'];
    }

    /**
     * Sets billing_address_city
     *
     * @param string $billing_address_city billing_address_city
     *
     * @return self
     */
    public function setBillingAddressCity($billing_address_city)
    {
        if (is_null($billing_address_city)) {
            throw new \InvalidArgumentException('non-nullable billing_address_city cannot be null');
        }
        $this->container['billing_address_city'] = $billing_address_city;

        return $this;
    }

    /**
     * Gets billing_address_country_iso2
     *
     * @return string
     */
    public function getBillingAddressCountryIso2()
    {
        return $this->container['billing_address_country_iso2'];
    }

    /**
     * Sets billing_address_country_iso2
     *
     * @param string $billing_address_country_iso2 billing_address_country_iso2
     *
     * @return self
     */
    public function setBillingAddressCountryIso2($billing_address_country_iso2)
    {
        if (is_null($billing_address_country_iso2)) {
            throw new \InvalidArgumentException('non-nullable billing_address_country_iso2 cannot be null');
        }
        if ((mb_strlen($billing_address_country_iso2) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_address_country_iso2 when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($billing_address_country_iso2) < 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_address_country_iso2 when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 2.');
        }

        $this->container['billing_address_country_iso2'] = $billing_address_country_iso2;

        return $this;
    }

    /**
     * Gets billing_address_state
     *
     * @return string
     */
    public function getBillingAddressState()
    {
        return $this->container['billing_address_state'];
    }

    /**
     * Sets billing_address_state
     *
     * @param string $billing_address_state billing_address_state
     *
     * @return self
     */
    public function setBillingAddressState($billing_address_state)
    {
        if (is_null($billing_address_state)) {
            throw new \InvalidArgumentException('non-nullable billing_address_state cannot be null');
        }
        if ((mb_strlen($billing_address_state) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_address_state when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($billing_address_state) < 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_address_state when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 2.');
        }

        $this->container['billing_address_state'] = $billing_address_state;

        return $this;
    }

    /**
     * Gets billing_address_street1
     *
     * @return string
     */
    public function getBillingAddressStreet1()
    {
        return $this->container['billing_address_street1'];
    }

    /**
     * Sets billing_address_street1
     *
     * @param string $billing_address_street1 billing_address_street1
     *
     * @return self
     */
    public function setBillingAddressStreet1($billing_address_street1)
    {
        if (is_null($billing_address_street1)) {
            throw new \InvalidArgumentException('non-nullable billing_address_street1 cannot be null');
        }
        $this->container['billing_address_street1'] = $billing_address_street1;

        return $this;
    }

    /**
     * Gets billing_address_street2
     *
     * @return string|null
     */
    public function getBillingAddressStreet2()
    {
        return $this->container['billing_address_street2'];
    }

    /**
     * Sets billing_address_street2
     *
     * @param string|null $billing_address_street2 Empty string acceptable for billing_address_street2
     *
     * @return self
     */
    public function setBillingAddressStreet2($billing_address_street2)
    {
        if (is_null($billing_address_street2)) {
            throw new \InvalidArgumentException('non-nullable billing_address_street2 cannot be null');
        }
        $this->container['billing_address_street2'] = $billing_address_street2;

        return $this;
    }

    /**
     * Gets billing_address_zip
     *
     * @return string
     */
    public function getBillingAddressZip()
    {
        return $this->container['billing_address_zip'];
    }

    /**
     * Sets billing_address_zip
     *
     * @param string $billing_address_zip billing_address_zip
     *
     * @return self
     */
    public function setBillingAddressZip($billing_address_zip)
    {
        if (is_null($billing_address_zip)) {
            throw new \InvalidArgumentException('non-nullable billing_address_zip cannot be null');
        }
        if ((mb_strlen($billing_address_zip) > 5)) {
            throw new \InvalidArgumentException('invalid length for $billing_address_zip when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($billing_address_zip) < 5)) {
            throw new \InvalidArgumentException('invalid length for $billing_address_zip when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 5.');
        }

        $this->container['billing_address_zip'] = $billing_address_zip;

        return $this;
    }

    /**
     * Gets collec_country_iso2
     *
     * @return string
     */
    public function getCollecCountryIso2()
    {
        return $this->container['collec_country_iso2'];
    }

    /**
     * Sets collec_country_iso2
     *
     * @param string $collec_country_iso2 collec_country_iso2
     *
     * @return self
     */
    public function setCollecCountryIso2($collec_country_iso2)
    {
        if (is_null($collec_country_iso2)) {
            throw new \InvalidArgumentException('non-nullable collec_country_iso2 cannot be null');
        }
        if ((mb_strlen($collec_country_iso2) > 2)) {
            throw new \InvalidArgumentException('invalid length for $collec_country_iso2 when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($collec_country_iso2) < 2)) {
            throw new \InvalidArgumentException('invalid length for $collec_country_iso2 when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 2.');
        }

        $this->container['collec_country_iso2'] = $collec_country_iso2;

        return $this;
    }

    /**
     * Gets collec_zip
     *
     * @return string
     */
    public function getCollecZip()
    {
        return $this->container['collec_zip'];
    }

    /**
     * Sets collec_zip
     *
     * @param string $collec_zip Zip code of the collection/pickup address
     *
     * @return self
     */
    public function setCollecZip($collec_zip)
    {
        if (is_null($collec_zip)) {
            throw new \InvalidArgumentException('non-nullable collec_zip cannot be null');
        }
        if ((mb_strlen($collec_zip) > 5)) {
            throw new \InvalidArgumentException('invalid length for $collec_zip when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($collec_zip) < 5)) {
            throw new \InvalidArgumentException('invalid length for $collec_zip when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 5.');
        }

        $this->container['collec_zip'] = $collec_zip;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company Company name. Full name is acceptable in this field if the user has no company name
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Only required if has_invoice is true. 3-letter currency code associated with invoice_value
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        if ((mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets has_invoice
     *
     * @return bool
     */
    public function getHasInvoice()
    {
        return $this->container['has_invoice'];
    }

    /**
     * Sets has_invoice
     *
     * @param bool $has_invoice true if user has been issued a UPS invoice within the past 90 days for the US or Canada; and 45 days for any other countries. User can use data from any of the last 3 invoices
     *
     * @return self
     */
    public function setHasInvoice($has_invoice)
    {
        if (is_null($has_invoice)) {
            throw new \InvalidArgumentException('non-nullable has_invoice cannot be null');
        }
        $this->container['has_invoice'] = $has_invoice;

        return $this;
    }

    /**
     * Gets invoice_controlid
     *
     * @return string|null
     */
    public function getInvoiceControlid()
    {
        return $this->container['invoice_controlid'];
    }

    /**
     * Sets invoice_controlid
     *
     * @param string|null $invoice_controlid Only required if aia_country_iso2 is US and has_invoice is true.
     *
     * @return self
     */
    public function setInvoiceControlid($invoice_controlid)
    {
        if (is_null($invoice_controlid)) {
            throw new \InvalidArgumentException('non-nullable invoice_controlid cannot be null');
        }
        if ((mb_strlen($invoice_controlid) > 4)) {
            throw new \InvalidArgumentException('invalid length for $invoice_controlid when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($invoice_controlid) < 4)) {
            throw new \InvalidArgumentException('invalid length for $invoice_controlid when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 4.');
        }

        $this->container['invoice_controlid'] = $invoice_controlid;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return string|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string|null $invoice_date Only required if has_invoice is true. Date the invoice was issued. yyyymmdd format
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number invoice_number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        if ((mb_strlen($invoice_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling ConnectExistingOwnAccountRequestParameters., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($invoice_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling ConnectExistingOwnAccountRequestParameters., must be bigger than or equal to 1.');
        }

        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_value
     *
     * @return string|null
     */
    public function getInvoiceValue()
    {
        return $this->container['invoice_value'];
    }

    /**
     * Sets invoice_value
     *
     * @param string|null $invoice_value Only required if has_invoice is true. Max 16 digits before decimal and 2 digits after decimal
     *
     * @return self
     */
    public function setInvoiceValue($invoice_value)
    {
        if (is_null($invoice_value)) {
            throw new \InvalidArgumentException('non-nullable invoice_value cannot be null');
        }
        $this->container['invoice_value'] = $invoice_value;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title User's title, e.g. including but not limited to Manager, Doctor, Artist, Engineer, Mr, Ms, Mrs, Mx
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets ups_agreements
     *
     * @return bool
     */
    public function getUpsAgreements()
    {
        return $this->container['ups_agreements'];
    }

    /**
     * Sets ups_agreements
     *
     * @param bool $ups_agreements Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     *
     * @return self
     */
    public function setUpsAgreements($ups_agreements)
    {
        if (is_null($ups_agreements)) {
            throw new \InvalidArgumentException('non-nullable ups_agreements cannot be null');
        }
        $this->container['ups_agreements'] = $ups_agreements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


